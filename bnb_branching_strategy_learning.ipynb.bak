{
 "metadata": {
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3",
   "language": "python"
  },
  "language_info": {
   "name": "python",
   "version": "3.11.11",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "colab": {
   "provenance": [],
   "gpuType": "T4"
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "sourceId": 11850191,
     "sourceType": "datasetVersion",
     "datasetId": 7445809
    },
    {
     "sourceId": 240284892,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook",
   "isGpuEnabled": false
  }
 },
 "nbformat_minor": 0,
 "nbformat": 4,
 "cells": [
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "seed = 0"
   ],
   "metadata": {
    "id": "53aeb4cc16ed9874",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:29.818735Z",
     "iopub.execute_input": "2025-05-17T17:04:29.819137Z",
     "iopub.status.idle": "2025-05-17T17:04:29.824249Z",
     "shell.execute_reply.started": "2025-05-17T17:04:29.819112Z",
     "shell.execute_reply": "2025-05-17T17:04:29.823250Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:39.288567Z",
     "start_time": "2025-05-18T12:05:39.284920Z"
    }
   },
   "outputs": [],
   "execution_count": 21
  },
  {
   "cell_type": "code",
   "source": "!pip install pyscipopt kagglehub",
   "metadata": {
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:29.842589Z",
     "iopub.execute_input": "2025-05-17T17:04:29.842891Z",
     "iopub.status.idle": "2025-05-17T17:04:33.447569Z",
     "shell.execute_reply.started": "2025-05-17T17:04:29.842870Z",
     "shell.execute_reply": "2025-05-17T17:04:33.446130Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aZicDO8qOOKc",
    "outputId": "7b610f33-6a8f-4e2a-f8d4-5843266011d5",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.248278Z",
     "start_time": "2025-05-18T12:05:39.414611Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyscipopt in ./.venv/lib64/python3.9/site-packages (5.5.0)\r\n",
      "Requirement already satisfied: kagglehub in ./.venv/lib/python3.9/site-packages (0.3.12)\r\n",
      "Requirement already satisfied: numpy>=1.16.0 in ./.venv/lib64/python3.9/site-packages (from pyscipopt) (2.0.2)\r\n",
      "Requirement already satisfied: packaging in ./.venv/lib/python3.9/site-packages (from kagglehub) (25.0)\r\n",
      "Requirement already satisfied: pyyaml in ./.venv/lib64/python3.9/site-packages (from kagglehub) (6.0.2)\r\n",
      "Requirement already satisfied: requests in ./.venv/lib/python3.9/site-packages (from kagglehub) (2.32.3)\r\n",
      "Requirement already satisfied: tqdm in ./.venv/lib/python3.9/site-packages (from kagglehub) (4.67.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in ./.venv/lib64/python3.9/site-packages (from requests->kagglehub) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in ./.venv/lib/python3.9/site-packages (from requests->kagglehub) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in ./.venv/lib/python3.9/site-packages (from requests->kagglehub) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./.venv/lib/python3.9/site-packages (from requests->kagglehub) (2025.4.26)\r\n",
      "\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m A new release of pip is available: \u001B[0m\u001B[31;49m25.0.1\u001B[0m\u001B[39;49m -> \u001B[0m\u001B[32;49m25.1.1\u001B[0m\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m To update, run: \u001B[0m\u001B[32;49mpip install --upgrade pip\u001B[0m\r\n"
     ]
    }
   ],
   "execution_count": 22
  },
  {
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "from math import ceil, floor\n",
    "\n",
    "\n",
    "class Params:\n",
    "    def __init__(self, var_idx: int, x_i: float, node_depth: int, nr_variables: int, curr_obj: float,\n",
    "                 downgain: float, upgain: float, n_branches_by_var: int, n_nodes: int):\n",
    "        self.var_idx = var_idx\n",
    "        self.x_i = x_i\n",
    "        self.node_depth = node_depth\n",
    "        self.nr_variables = nr_variables\n",
    "        self.curr_obj = curr_obj\n",
    "        self.downgain = downgain\n",
    "        self.upgain = upgain\n",
    "        self.n_branches_by_var = n_branches_by_var\n",
    "        self.n_nodes = n_nodes\n",
    "\n",
    "\n",
    "def __static_feat(i: int, A: np.ndarray, b: np.ndarray, c: np.ndarray):\n",
    "    features = {}\n",
    "    # 1st class\n",
    "    # sign{c_i}\n",
    "    c_i = c[i]\n",
    "    features['sign'] = np.sign(c_i)\n",
    "\n",
    "    # |c_i| / sum_{k: c_k >= 0} |c_k|\n",
    "    pos_sum = np.sum(np.abs(c[c >= 0]))\n",
    "    # |c_i| / sum_{k: c_k < 0} |c_k|\n",
    "    neg_sum = np.sum(np.abs(c[c < 0]))\n",
    "\n",
    "    features['c_i/sum_pos'] = abs(c_i) / pos_sum if pos_sum != 0 else 0\n",
    "    features['c_i/sum_neg'] = abs(c_i) / neg_sum if neg_sum != 0 else 0\n",
    "\n",
    "    # 2nd class\n",
    "    # m_j^{+1}(i) = A_{ji}/|b_j|, forall j s.t. b_j >= 0\n",
    "    M1_pos = []\n",
    "    # m_j^{-1}(i) = A_{ji}/|b_j|, forall j s.t. b_j < 0\n",
    "    M1_neg = []\n",
    "    for j in range(A.shape[0]):\n",
    "        a_ji = A[j, i]\n",
    "        if b[j] >= 0:\n",
    "            M1_pos.append(a_ji / abs(b[j]) if b[j] != 0 else 0)\n",
    "        else:\n",
    "            M1_neg.append(a_ji / abs(b[j]))\n",
    "\n",
    "    features['M1_pos_min'] = np.min(M1_pos) if M1_pos else 0\n",
    "    features['M1_pos_max'] = np.max(M1_pos) if M1_pos else 0\n",
    "    features['M1_neg_min'] = np.min(M1_neg) if M1_neg else 0\n",
    "    features['M1_neg_max'] = np.max(M1_neg) if M1_neg else 0\n",
    "\n",
    "    # m_j^{2+} (i) = |c_i|/|A_{ji}| forall j s.t. c_i >= 0\n",
    "    M2_pos = []\n",
    "    # m_j^{2-} (i) = |c_i|/|A_{ji}| forall j s.t. c_i < 0\n",
    "    M2_neg = []\n",
    "    for j in range(A.shape[0]):\n",
    "        if c[i] >= 0:\n",
    "            M2_pos.append(abs(c_i) / abs(A[j, i]) if A[j, i] != 0 else 0)\n",
    "        else:\n",
    "            M2_neg.append(abs(c_i) / abs(A[j, i]) if A[j, i] != 0 else 0)\n",
    "\n",
    "    features['M2_pos_min'] = np.min(M2_pos) if M2_pos else 0\n",
    "    features['M2_pos_max'] = np.max(M2_pos) if M2_pos else 0\n",
    "    features['M2_neg_min'] = np.min(M2_neg) if M2_neg else 0\n",
    "    features['M2_neg_max'] = np.max(M2_neg) if M2_neg else 0\n",
    "\n",
    "    M3_pp = []\n",
    "    M3_pm = []\n",
    "    M3_mp = []\n",
    "    M3_mm = []\n",
    "\n",
    "    for j in range(A.shape[0]):\n",
    "        pos_sum = np.sum(np.abs(A[j, A[j] >= 0]))\n",
    "        neg_sum = np.sum(np.abs(A[j, A[j] < 0]))\n",
    "\n",
    "        a_ji = abs(A[j, i])\n",
    "        if A[j, i] >= 0:\n",
    "            M3_pp.append(a_ji / pos_sum if pos_sum != 0 else 0)\n",
    "            M3_pm.append(a_ji / neg_sum if neg_sum != 0 else 0)\n",
    "        else:\n",
    "            M3_mp.append(a_ji / pos_sum if pos_sum != 0 else 0)\n",
    "            M3_mm.append(a_ji / neg_sum if neg_sum != 0 else 0)\n",
    "\n",
    "    features['M3_pp_min'] = np.min(M3_pp) if M3_pp else 0\n",
    "    features['M3_pp_max'] = np.max(M3_pp) if M3_pp else 0\n",
    "    features['M3_pm_min'] = np.min(M3_pm) if M3_pm else 0\n",
    "    features['M3_pm_max'] = np.max(M3_pm) if M3_pm else 0\n",
    "    features['M3_mp_min'] = np.min(M3_mp) if M3_mp else 0\n",
    "    features['M3_mp_max'] = np.max(M3_mp) if M3_mp else 0\n",
    "    features['M3_mm_min'] = np.min(M3_mm) if M3_mm else 0\n",
    "    features['M3_mm_max'] = np.max(M3_mm) if M3_mm else 0\n",
    "\n",
    "    return features\n",
    "\n",
    "\n",
    "def __dynamic_feat(params: Params):\n",
    "    # proportion of fixed variables at the current solution\n",
    "    # depth of current node/nr of integer variables\n",
    "    features = {}\n",
    "    features['depth'] = params.node_depth / params.nr_variables\n",
    "\n",
    "    features['min_xi'] = min(params.x_i - floor(params.x_i), ceil(params.x_i) - params.x_i)\n",
    "\n",
    "    features['log_down_driebeek'] = np.log(params.downgain) if params.downgain > 0 else 0\n",
    "    features['log_up_driebeek'] = np.log(params.upgain) if params.upgain > 0 else 0\n",
    "    features['log_down_up_driebeek'] = np.log(params.downgain + params.upgain) if (\n",
    "                                                                                              params.downgain + params.upgain) > 0 else 0\n",
    "    features['down_driebeek'] = params.downgain\n",
    "    features['up_driebeek'] = params.upgain\n",
    "\n",
    "    return features\n",
    "\n",
    "\n",
    "def __dynamic_opt_feat(params: Params):\n",
    "    features = {'branching_ratio': params.n_branches_by_var / params.n_nodes}\n",
    "    return features\n",
    "\n",
    "\n",
    "def compute_features(params: Params, A: np.ndarray, b: np.ndarray, c: np.ndarray):\n",
    "    static = __static_feat(params.var_idx, A, b, c)\n",
    "    dynamic = __dynamic_feat(params)\n",
    "    dynamic_opt = __dynamic_opt_feat(params)\n",
    "\n",
    "    return {**static, **dynamic, **dynamic_opt}\n"
   ],
   "metadata": {
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.450031Z",
     "iopub.execute_input": "2025-05-17T17:04:33.450658Z",
     "iopub.status.idle": "2025-05-17T17:04:33.471873Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.450625Z",
     "shell.execute_reply": "2025-05-17T17:04:33.470818Z"
    },
    "id": "NSpxcXSuOOKd",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.357440Z",
     "start_time": "2025-05-18T12:05:40.340072Z"
    }
   },
   "outputs": [],
   "execution_count": 23
  },
  {
   "cell_type": "code",
   "source": [
    "from pyscipopt import Model, Branchrule, Variable\n",
    "from pyscipopt import SCIP_RESULT\n",
    "import numpy as np\n",
    "from collections import defaultdict\n",
    "import pandas as pd\n",
    "\n",
    "class StrongBranchingRule(Branchrule):\n",
    "    def __init__(self, model, A, b, c, logged, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        self.model: Model = model\n",
    "        self.dataset = pd.DataFrame()\n",
    "        self.A = A\n",
    "        self.b = b\n",
    "        self.c = c\n",
    "        self.logged = logged\n",
    "        self.n_branches_by_var = defaultdict(int)\n",
    "\n",
    "    def branchexeclp(self, allowaddcons):\n",
    "        branch_cands, branch_cand_sols, branch_cand_fracs, ncands, npriocands, nimplcands = self.model.getLPBranchCands()\n",
    "\n",
    "        # Initialise scores for each variable\n",
    "        scores = [-self.model.infinity() for _ in range(npriocands)]\n",
    "        down_bounds = [None for _ in range(npriocands)]\n",
    "        up_bounds = [None for _ in range(npriocands)]\n",
    "\n",
    "        # Initialise placeholder values\n",
    "        num_nodes = self.model.getNNodes()\n",
    "        lpobjval = self.model.getLPObjVal()\n",
    "        lperror = False\n",
    "        best_cand_idx = 0\n",
    "\n",
    "        # Start strong branching and iterate over the branching candidates\n",
    "        self.model.startStrongbranch()\n",
    "        for i in range(npriocands):\n",
    "\n",
    "            # Check the case that the variable has already been strong branched on at this node.\n",
    "            # This case occurs when events happen in the node that should be handled immediately.\n",
    "            # When processing the node again (because the event did not remove it), there's no need to duplicate work.\n",
    "            if self.model.getVarStrongbranchNode(branch_cands[i]) == num_nodes:\n",
    "                down, up, downvalid, upvalid, _, lastlpobjval = self.model.getVarStrongbranchLast(branch_cands[i])\n",
    "                if downvalid:\n",
    "                    down_bounds[i] = down\n",
    "                if upvalid:\n",
    "                    up_bounds[i] = up\n",
    "                downgain = max([down - lastlpobjval, 0])\n",
    "                upgain = max([up - lastlpobjval, 0])\n",
    "                scores[i] = self.model.getBranchScoreMultiple(branch_cands[i], [downgain, upgain])\n",
    "                continue\n",
    "\n",
    "            # Strong branch\n",
    "            down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror = self.model.getVarStrongbranch(\n",
    "                branch_cands[i], 200, idempotent=False)\n",
    "\n",
    "            # In the case of an LP error handle appropriately (for this example we just break the loop)\n",
    "            if lperror:\n",
    "                break\n",
    "\n",
    "            # In the case of both infeasible sub-problems cutoff the node\n",
    "            if downinf and upinf:\n",
    "                return {\"result\": SCIP_RESULT.CUTOFF}\n",
    "\n",
    "            # Calculate the gains for each up and down node that strong branching explored\n",
    "            if not downinf and downvalid:\n",
    "                down_bounds[i] = down\n",
    "                downgain = max([down - lpobjval, 0])\n",
    "            else:\n",
    "                downgain = 0\n",
    "            if not upinf and upvalid:\n",
    "                up_bounds[i] = up\n",
    "                upgain = max([up - lpobjval, 0])\n",
    "            else:\n",
    "                upgain = 0\n",
    "\n",
    "\n",
    "            # Update the pseudo-costs\n",
    "            lpsol = branch_cands[i].getLPSol()\n",
    "            if not downinf and downvalid:\n",
    "                self.model.updateVarPseudocost(branch_cands[i], -self.model.frac(lpsol), downgain, 1)\n",
    "            if not upinf and upvalid:\n",
    "                self.model.updateVarPseudocost(branch_cands[i], 1 - self.model.frac(lpsol), upgain, 1)\n",
    "\n",
    "            scores[i] = self.model.getBranchScoreMultiple(branch_cands[i], [downgain, upgain])\n",
    "            if scores[i] > scores[best_cand_idx]:\n",
    "                best_cand_idx = i\n",
    "\n",
    "            self.n_branches_by_var[branch_cands[i].name] += 1\n",
    "            params = Params(\n",
    "                var_idx=branch_cands[i].getCol().getLPPos(),\n",
    "                x_i=branch_cands[i].getObj(),\n",
    "                node_depth=self.model.getCurrentNode().getDepth(),\n",
    "                nr_variables=self.model.getNVars(),\n",
    "                curr_obj=self.model.getLPObjVal(),\n",
    "                downgain=downgain,\n",
    "                upgain=upgain,\n",
    "                n_branches_by_var=self.n_branches_by_var[branch_cands[i].name],\n",
    "                n_nodes=self.model.getNNodes(),\n",
    "            )\n",
    "            features = compute_features(params, self.A, self.b, self.c)\n",
    "            curr_obj = self.model.getLPObjVal()\n",
    "            features['score'] = scores[i] / np.abs(curr_obj) if curr_obj != 0 else 0\n",
    "            row = pd.DataFrame.from_dict(features, orient='index').T\n",
    "            self.dataset = pd.concat([self.dataset, row], ignore_index=True)\n",
    "\n",
    "        # End strong branching\n",
    "        self.model.endStrongbranch()\n",
    "\n",
    "        # In the case of an LP error\n",
    "        if lperror:\n",
    "            return {\"result\": SCIP_RESULT.DIDNOTRUN}\n",
    "\n",
    "        # print(\"--> Strong branching on variable:\", branch_cands[best_cand_idx].name)\n",
    "        # Branch on the variable with the largest score\n",
    "        down_child, eq_child, up_child = self.model.branchVarVal(\n",
    "            branch_cands[best_cand_idx], branch_cands[best_cand_idx].getLPSol())\n",
    "\n",
    "        # Update the bounds of the down node and up node. Some cols might not exist due to pricing\n",
    "        if self.model.allColsInLP():\n",
    "            if down_child is not None and down_bounds[best_cand_idx] is not None:\n",
    "                self.model.updateNodeLowerbound(down_child, down_bounds[best_cand_idx])\n",
    "            if up_child is not None and up_bounds[best_cand_idx] is not None:\n",
    "                self.model.updateNodeLowerbound(up_child, up_bounds[best_cand_idx])\n",
    "\n",
    "        return {\"result\": SCIP_RESULT.BRANCHED}\n"
   ],
   "metadata": {
    "id": "Ib8Sg8NshGwo",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.473093Z",
     "iopub.execute_input": "2025-05-17T17:04:33.473454Z",
     "iopub.status.idle": "2025-05-17T17:04:33.500602Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.473425Z",
     "shell.execute_reply": "2025-05-17T17:04:33.499669Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.473739Z",
     "start_time": "2025-05-18T12:05:40.459195Z"
    }
   },
   "outputs": [],
   "execution_count": 24
  },
  {
   "cell_type": "code",
   "source": [
    "from collections import defaultdict\n",
    "from datetime import datetime\n",
    "import numpy as np\n",
    "from pyscipopt import Model, quicksum, SCIP_PARAMSETTING\n",
    "from pyscipopt import Branchrule\n",
    "from pyscipopt.scip import Term\n",
    "from pyscipopt.scip import Solution\n",
    "\n",
    "from learned_strong_branching import LearnedStrongBranching\n",
    "from strong_branching import StrongBranchingRule\n",
    "\n",
    "class Problem:\n",
    "    def __init__(self, name, c, lb, ub, constraint_types, b, A, var_types=None, model=None):\n",
    "        self.name = name\n",
    "        self.c = c\n",
    "        self.lb = lb\n",
    "        self.ub = ub\n",
    "        self.constraint_types = constraint_types\n",
    "        self.var_types = var_types if var_types is not None else ['B'] * len(c)  # assuming binary\n",
    "        self.b = b\n",
    "        self.A = A\n",
    "\n",
    "        self.model = model\n",
    "\n",
    "    @staticmethod\n",
    "    def from_model(path):\n",
    "        model : Model = Model()\n",
    "        model.readProblem(path)\n",
    "        name = model.getProbName()\n",
    "\n",
    "        variables = model.getVars()\n",
    "        constraints = model.getConss()\n",
    "\n",
    "        # Initialize data structures\n",
    "        n_vars = len(variables)\n",
    "        n_cons = len(constraints)\n",
    "\n",
    "        # Create mapping from variable to index\n",
    "        A_data = defaultdict(float)\n",
    "        b = np.zeros(n_cons)\n",
    "        c = np.zeros(n_vars)\n",
    "\n",
    "        # Extract objective coefficients (vector c)\n",
    "        for i, var in enumerate(variables):\n",
    "            c[i] = model.getObjective().terms.get(Term(var), 0.0)\n",
    "\n",
    "        variables = model.getVars()\n",
    "        var_names = [v.name for v in variables]\n",
    "        num_vars = len(variables)\n",
    "\n",
    "        # Initialize A and b\n",
    "        A = []\n",
    "        b = []\n",
    "        constraint_senses = []\n",
    "\n",
    "        all_constraints = model.getConss()\n",
    "\n",
    "        for con in all_constraints:\n",
    "            assert con.isLinear(), \"Only linear constraints are supported\"\n",
    "\n",
    "            # Get coefficients for this linear constraint\n",
    "            coeffs = model.getValsLinear(con)\n",
    "\n",
    "            # Create a row for the A matrix\n",
    "            row = [0.0] * num_vars\n",
    "            for var, coeff in coeffs.items():\n",
    "                v = list(filter(lambda x: x.name == var, model.getVars()))[0]\n",
    "                try:\n",
    "                    # Find the index of the variable in our ordered list\n",
    "                    var_index = v.getIndex()\n",
    "                    row[var_index] = coeff\n",
    "                except ValueError:\n",
    "                    # This case should ideally not happen if getVars() gets all relevant variables,\n",
    "                    # but it's good practice to handle unexpected variables.\n",
    "                    print(f\"Warning: Variable {var.getName()} found in constraint {con.getName()} but not in model's getVars() list.\")\n",
    "                    pass\n",
    "\n",
    "            rhs = model.getRhs(con)\n",
    "            A.append(row)\n",
    "            b.append(rhs)\n",
    "\n",
    "        A = np.array(A)\n",
    "        b = np.array(b)\n",
    "        return Problem(name, c=c, lb=[], ub=[], constraint_types=[], b=b, A=A, var_types=[], model=model)\n",
    "\n",
    "    def solve_with_sb(self, logged=False):\n",
    "        model = self.__build_model() if self.model is None else self.model\n",
    "\n",
    "        if not logged:\n",
    "            model.hideOutput()\n",
    "            model.setIntParam('display/verblevel', 0)  # Quiet mode\n",
    "        else:\n",
    "            model.setIntParam('display/verblevel', 3)  # Verbose output\n",
    "\n",
    "        sb = StrongBranchingRule(model, self.A, self.b, self.c, logged)\n",
    "\n",
    "        model.includeBranchrule(\n",
    "            sb,\n",
    "            \"strongbranching\",\n",
    "            \"Custom strong branching rule for learning\",\n",
    "            priority=1000000,  # High priority to ensure it's used\n",
    "            maxdepth=-1,  # No depth limit\n",
    "            maxbounddist=1.0\n",
    "        )\n",
    "        model.writeProblem(f\"{self.name}_sb.lp\")\n",
    "\n",
    "        start = datetime.now()\n",
    "        model.optimize()\n",
    "        end = datetime.now()\n",
    "\n",
    "        assert model.getStatus() == \"optimal\", f\"Model {model.getProbName()} did not solve to optimality. Status: {model.getStatus()}\"\n",
    "\n",
    "        stats = {\n",
    "            'time': (end - start).total_seconds(),\n",
    "            'n_vars': len(self.c),\n",
    "            'n_constraints': len(self.b),\n",
    "            'name': self.name,\n",
    "            'sb_decision': sb.model.getNNodes(),\n",
    "            'gap': sb.model.getGap(),\n",
    "        }\n",
    "        return sb.dataset, stats\n",
    "\n",
    "    def solve_with_learned_sb(self, predictor, logged=False, max_nodes=-1, timelimit=-1):\n",
    "        model = self.__build_model() if self.model is None else self.model\n",
    "\n",
    "        if not logged:\n",
    "            model.hideOutput()\n",
    "            model.setIntParam('display/verblevel', 0)  # Quiet mode\n",
    "        else:\n",
    "            model.setIntParam('display/verblevel', 3)  # Verbose output\n",
    "\n",
    "        if max_nodes > 0:\n",
    "            model.setIntParam('limits/nodes', max_nodes)\n",
    "\n",
    "        if timelimit > 0:\n",
    "            model.setRealParam('limits/time', timelimit)\n",
    "\n",
    "        sb = LearnedStrongBranching(model, predictor, self.A, self.b, self.c, logged)\n",
    "\n",
    "        model.includeBranchrule(\n",
    "            sb,\n",
    "            \"learnedstrongbranching\",\n",
    "            \"Custom learned strong branching rule\",\n",
    "            priority=1000000,  # High priority to ensure it's used\n",
    "            maxdepth=-1,\n",
    "            maxbounddist=1.0\n",
    "        )\n",
    "\n",
    "        start = datetime.now()\n",
    "        model.optimize()\n",
    "        end = datetime.now()\n",
    "\n",
    "        assert model.getStatus() == \"optimal\", f\"Model {model.getProbName()} did not solve to optimality. Status: {model.getStatus()}\"\n",
    "\n",
    "        stats = {\n",
    "            'time': (end - start).total_seconds(),\n",
    "            'name': self.name,\n",
    "            'sb_decision': sb.model.getNNodes(),\n",
    "            'gap': sb.model.getGap(),\n",
    "        }\n",
    "        return stats\n",
    "\n",
    "\n",
    "    def __build_model(self):\n",
    "        model = Model(self.name)\n",
    "        n_vars = len(self.c)\n",
    "        x = []\n",
    "        for i in range(n_vars):\n",
    "            if self.var_types[i] == 'B':\n",
    "                x.append(model.addVar(name=f\"x_{i}\", vtype=\"B\"))\n",
    "            elif self.var_types[i] == 'C':\n",
    "                x.append(model.addVar(name=f\"x_{i}\", vtype=\"C\", lb=self.lb[i], ub=self.ub[i]))\n",
    "\n",
    "        # Set objective function\n",
    "        model.setObjective(quicksum(self.c[i] * x[i] for i in range(n_vars)), \"minimize\")\n",
    "\n",
    "        n_constraints = len(self.b)\n",
    "        if n_constraints != len(self.constraint_types):\n",
    "            raise Exception(\n",
    "                f\"Number of constraints ({n_constraints}) doesn't match number of types ({len(self.constraint_types)})\")\n",
    "\n",
    "        # Add constraints\n",
    "        for i in range(n_constraints):\n",
    "            lhs = quicksum(self.A[i][j] * x[j] for j in range(n_vars) if self.A[i][j] != 0)\n",
    "\n",
    "            if self.constraint_types[i] == 'E':\n",
    "                model.addCons(lhs == self.b[i])\n",
    "            elif self.constraint_types[i] == 'G':\n",
    "                model.addCons(lhs >= self.b[i])\n",
    "            elif self.constraint_types[i] == 'L':\n",
    "                model.addCons(lhs <= self.b[i])\n",
    "\n",
    "        # Disable cuts\n",
    "        model.setIntParam('separating/maxrounds', 0)\n",
    "        model.setIntParam('separating/maxroundsroot', 0)\n",
    "        model.setParam(\"separating/maxcuts\", 0)\n",
    "        model.setParam(\"separating/maxcutsroot\", 0)\n",
    "        model.setParam(\"separating/maxrounds\", 0)\n",
    "        model.setParam(\"separating/maxroundsroot\", 0)\n",
    "\n",
    "        # Disable various cutting plane methods\n",
    "        cut_types = [\n",
    "            'separating/clique', 'separating/gomory', 'separating/strongcg',\n",
    "            'separating/cmir', 'separating/flowcover', 'separating/mcf', 'separating/zerohalf',\n",
    "        ]\n",
    "        for cut_type in cut_types:\n",
    "            model.setIntParam(f'{cut_type}/freq', -1)\n",
    "\n",
    "        # Disable heuristics\n",
    "        model.setIntParam('heuristics/dps/freq', -1)\n",
    "\n",
    "        # Disable presolving\n",
    "        model.setBoolParam('lp/presolving', False)\n",
    "        model.setBoolParam('concurrent/presolvebefore', False)\n",
    "        model.setBoolParam('presolving/donotmultaggr', True)\n",
    "\n",
    "        presolving = [\n",
    "            \"presolving/maxrounds\",\n",
    "            \"presolving/trivial/maxrounds\",\n",
    "            \"presolving/inttobinary/maxrounds\",\n",
    "            \"presolving/gateextraction/maxrounds\",\n",
    "            \"presolving/dualcomp/maxrounds\",\n",
    "            \"presolving/domcol/maxrounds\",\n",
    "            \"presolving/implics/maxrounds\",\n",
    "            \"presolving/sparsify/maxrounds\",\n",
    "            \"presolving/dualsparsify/maxrounds\",\n",
    "            \"propagating/dualfix/maxprerounds\",\n",
    "            \"propagating/genvbounds/maxprerounds\",\n",
    "            \"propagating/obbt/maxprerounds\",\n",
    "            \"propagating/nlobbt/maxprerounds\",\n",
    "            \"propagating/probing/maxprerounds\",\n",
    "            \"propagating/pseudoobj/maxprerounds\",\n",
    "            \"propagating/redcost/maxprerounds\",\n",
    "            \"propagating/rootredcost/maxprerounds\",\n",
    "            \"propagating/symmetry/maxprerounds\",\n",
    "            \"propagating/vbounds/maxprerounds\",\n",
    "            \"propagating/maxrounds\",\n",
    "            \"propagating/maxroundsroot\",\n",
    "            \"constraints/cardinality/maxprerounds\",\n",
    "            \"constraints/SOS1/maxprerounds\",\n",
    "            \"constraints/SOS2/maxprerounds\",\n",
    "            \"constraints/varbound/maxprerounds\",\n",
    "            \"constraints/knapsack/maxprerounds\",\n",
    "            \"constraints/setppc/maxprerounds\",\n",
    "            \"constraints/linking/maxprerounds\",\n",
    "            \"constraints/or/maxprerounds\",\n",
    "            \"constraints/and/maxprerounds\",\n",
    "            \"constraints/xor/maxprerounds\",\n",
    "            \"constraints/conjunction/maxprerounds\",\n",
    "            \"constraints/disjunction/maxprerounds\",\n",
    "            \"constraints/linear/maxprerounds\",\n",
    "            \"constraints/orbisack/maxprerounds\",\n",
    "            \"constraints/orbitope/maxprerounds\",\n",
    "            \"constraints/symresack/maxprerounds\",\n",
    "            \"constraints/logicor/maxprerounds\",\n",
    "            \"constraints/bounddisjunction/maxprerounds\",\n",
    "            \"constraints/cumulative/maxprerounds\",\n",
    "            \"constraints/nonlinear/maxprerounds\",\n",
    "            \"constraints/pseudoboolean/maxprerounds\",\n",
    "            \"constraints/superindicator/maxprerounds\",\n",
    "            \"constraints/indicator/maxprerounds\",\n",
    "            \"constraints/components/maxprerounds\",\n",
    "            \"presolving/maxrestarts\",\n",
    "            \"presolving/maxrounds\",\n",
    "        ]\n",
    "\n",
    "        for presolve in presolving:\n",
    "            model.setIntParam(presolve, 0)\n",
    "\n",
    "        model.setIntParam('display/freq', 500)\n",
    "        model.setHeuristics(SCIP_PARAMSETTING.OFF)\n",
    "        model.setSeparating(SCIP_PARAMSETTING.OFF)\n",
    "\n",
    "\n",
    "        assert(model.getNConss() == len(self.A)), \"Number of constraints in model doesn't match number of constraints in problem\"\n",
    "        assert(model.getNConss() == len(self.b)), \"Number of constraints in model doesn't match number of constraints in problem\"\n",
    "        assert(model.getNVars() == len(self.c)), \"Number of variables in model doesn't match number of variables in problem\"\n",
    "        return model\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"Problem(name={self.name})\"\n"
   ],
   "metadata": {
    "id": "CndBy1i3mkDw",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.502794Z",
     "iopub.execute_input": "2025-05-17T17:04:33.503093Z",
     "iopub.status.idle": "2025-05-17T17:04:33.531851Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.503069Z",
     "shell.execute_reply": "2025-05-17T17:04:33.531125Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.583490Z",
     "start_time": "2025-05-18T12:05:40.560239Z"
    }
   },
   "outputs": [],
   "execution_count": 25
  },
  {
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "\n",
    "\"\"\"\n",
    "Formulation\n",
    "min k = sum_{j in J} y_j\n",
    "s.t.\n",
    "     k >= 1\n",
    "     sum_{i in I} s(i) x_{ij} <= B y_i forall j in J\n",
    "     sum_{j in J} x_{ij} = 1 forall i in I\n",
    "\n",
    "     y_j in {0,1} forall j in J\n",
    "     x_{ij} in {0,1} forall i in I, j in J\n",
    "\n",
    "     x_{ij} in {0,1} forall i in I, j in J\n",
    "     y_j in {0,1} forall j in J\n",
    "\n",
    "     I: items, J: bins\n",
    "     s(i): size of item i\n",
    "     B: bin capacity\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def bin_packing(n_problems: int, items: (int, int), bins: (int, int), bin_capacity: (float, float),\n",
    "                item_size: (float, float)):\n",
    "    return [__generate_bp(i, items, bins, bin_capacity, item_size) for i in range(n_problems)]\n",
    "\n",
    "\n",
    "def __generate_bp(id: int, items: (int, int), bins: (int, int), bin_capacity: (float, float),\n",
    "                       item_size: (float, float)):\n",
    "    n_items = np.random.randint(*items)\n",
    "    n_bins = np.random.randint(*bins)\n",
    "    bin_capacity = np.random.uniform(*bin_capacity)\n",
    "    item_sizes = np.random.uniform(*item_size, size=n_items)\n",
    "    n_vars = n_bins + n_items * n_bins  # y_i + x_{ij}\n",
    "    assert n_vars < 1000, \"Community edition has a limit of 1000 variables\"\n",
    "\n",
    "    c = np.concatenate([\n",
    "        np.ones(n_bins),  # cost for bins (y_j)\n",
    "        np.zeros(n_items * n_bins)  # no cost for x_{ij} (multiplying n_items * n_bins as x has 2 indexes)\n",
    "    ])\n",
    "\n",
    "    A, b, types = [], [], []\n",
    "\n",
    "    ## constraints\n",
    "    # k >= 1\n",
    "    A.append(np.concatenate([np.zeros(n_bins), np.ones(n_items * n_bins)]))\n",
    "    b.append(1)\n",
    "    types.append('G')\n",
    "\n",
    "    # sum(s(i) * x_ij) <= B * y_j for all j\n",
    "    for j in range(n_bins):\n",
    "        row = np.zeros(n_vars)\n",
    "        row[j] = -bin_capacity  # coefficient for y_j\n",
    "        for i in range(n_items):\n",
    "            row[n_bins + i * n_bins + j] = item_sizes[i]  # coefficient for x_{ij}\n",
    "        A.append(row)\n",
    "        b.append(0)\n",
    "        types.append('L')\n",
    "\n",
    "    # sum(x_ij) = 1 for all i\n",
    "    for i in range(n_items):\n",
    "        row = np.zeros(n_vars)\n",
    "        for j in range(n_bins):\n",
    "            row[n_bins + i * n_bins + j] = 1  # coefficient for x_{ij}\n",
    "        A.append(row)\n",
    "        b.append(1)\n",
    "        types.append('E')\n",
    "\n",
    "    A = np.array(A)\n",
    "    b = np.array(b)\n",
    "    assert A.shape[0] == b.shape[0], \"A and b must have the same number of rows\"\n",
    "    assert b.shape[0] <= 1000, \"Community edition has a limit of 1000 constraints\"\n",
    "\n",
    "    types = np.array(types)\n",
    "\n",
    "    return Problem(\n",
    "        name=f\"random_BP_{id}\",\n",
    "        c=c,\n",
    "        lb=[0] * n_vars,\n",
    "        ub=[1] * n_vars,\n",
    "        constraint_types=types,\n",
    "        b=b,\n",
    "        A=A\n",
    "    )\n"
   ],
   "metadata": {
    "id": "RCl__Dyimoey",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.533028Z",
     "iopub.execute_input": "2025-05-17T17:04:33.533459Z",
     "iopub.status.idle": "2025-05-17T17:04:33.561933Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.533429Z",
     "shell.execute_reply": "2025-05-17T17:04:33.561090Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.651080Z",
     "start_time": "2025-05-18T12:05:40.641927Z"
    }
   },
   "outputs": [],
   "execution_count": 26
  },
  {
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "\n",
    "\"\"\"\n",
    "Formulation\n",
    "min sum_{s in S} x_s\n",
    "s.t. sum_{s: e in s} x_s >= 1 forall e in E\n",
    "x in {0,1}^n\n",
    "\"\"\"\n",
    "\n",
    "A_DENSITY = 0.3\n",
    "\n",
    "\n",
    "def set_cover(n_problems: int, universe_size_range=(50, 70)):\n",
    "    return [__generate_sc(i, universe_size_range) for i in range(n_problems)]\n",
    "\n",
    "def __generate_sc(id: int, universe_size_range):\n",
    "    # universe selection\n",
    "    universe_size = np.random.randint(*universe_size_range)\n",
    "    universe = np.random.choice(list(range(1, 100)), size=universe_size, replace=False)\n",
    "\n",
    "    binary_matrix = np.random.randint(0, 2, size=(len(universe), len(universe)))\n",
    "\n",
    "    # Ensure each row and column has at least one 1 to avoid empty sets\n",
    "    for i in range(binary_matrix.shape[0]):\n",
    "        if np.sum(binary_matrix[i, :]) == 0:\n",
    "            binary_matrix[i, np.random.randint(0, binary_matrix.shape[1])] = 1\n",
    "\n",
    "    for j in range(binary_matrix.shape[1]):\n",
    "        if np.sum(binary_matrix[:, j]) == 0:\n",
    "            binary_matrix[np.random.randint(0, binary_matrix.shape[0]), j] = 1\n",
    "\n",
    "    # mapping to universe elements\n",
    "    subsets = []\n",
    "    for j in range(binary_matrix.shape[1]):\n",
    "        subset = []\n",
    "        for i in range(binary_matrix.shape[0]):\n",
    "            if binary_matrix[i, j] == 1:\n",
    "                subset.append(universe[i])\n",
    "        subsets.append(subset)\n",
    "\n",
    "    # remove duplicated sets from subsets\n",
    "    unique_subsets = []\n",
    "    for subset in subsets:\n",
    "        if subset not in unique_subsets:\n",
    "            unique_subsets.append(subset)\n",
    "\n",
    "    # shuffling within subsets\n",
    "    for i in range(len(unique_subsets)):\n",
    "        np.random.shuffle(unique_subsets[i])\n",
    "\n",
    "    # Create Problem object\n",
    "    n_subsets = len(unique_subsets)\n",
    "    n_elements = len(universe)\n",
    "\n",
    "    A = np.zeros((n_elements, len(unique_subsets)))\n",
    "    for j, subset in enumerate(unique_subsets):\n",
    "        for elem in subset:\n",
    "            i, = np.where(universe == elem)\n",
    "            A[i, j] = 1\n",
    "\n",
    "    c = np.ones(len(unique_subsets))\n",
    "    b = np.ones(n_elements)\n",
    "    types = ['G'] * n_elements\n",
    "\n",
    "    return Problem(\n",
    "        name=f\"SC_{id}\",\n",
    "        c=c,\n",
    "        lb=[0] * n_subsets,\n",
    "        ub=[1] * n_subsets,\n",
    "        constraint_types=types,\n",
    "        b=b,\n",
    "        A=A,\n",
    "    )\n"
   ],
   "metadata": {
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.562859Z",
     "iopub.execute_input": "2025-05-17T17:04:33.563155Z",
     "iopub.status.idle": "2025-05-17T17:04:33.583670Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.563126Z",
     "shell.execute_reply": "2025-05-17T17:04:33.582598Z"
    },
    "id": "0rnC8gDlOOKk",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:40.753374Z",
     "start_time": "2025-05-18T12:05:40.744616Z"
    }
   },
   "outputs": [],
   "execution_count": 27
  },
  {
   "cell_type": "code",
   "source": [
    "from tqdm import tqdm\n",
    "bp_instances, sc_instances = 60, 60\n",
    "\n",
    "np.random.seed = 42\n",
    "\n",
    "dataset = {}\n",
    "\n",
    "dataset['BP'] = bin_packing(\n",
    "    n_problems=bp_instances,\n",
    "    items=(10, 20),\n",
    "    bins=(5, 10),\n",
    "    bin_capacity=(0.5, 1.5),\n",
    "    item_size=(0.1, 0.9),\n",
    ")\n",
    "\n",
    "dataset['SC'] = set_cover(\n",
    "    n_problems=sc_instances,\n",
    "    universe_size_range=(50, 80),\n",
    ")\n",
    "\n",
    "# split in train and test (80% train, 20% test)\n",
    "for name, problems in dataset.items():\n",
    "    n_train = int(len(problems) * 0.8)\n",
    "    np.random.shuffle(problems)\n",
    "    dataset[name] = {\n",
    "        'train': problems[:n_train],\n",
    "        'test': problems[n_train:]\n",
    "    }"
   ],
   "metadata": {
    "id": "ravW_YMNnSm0",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:33.584668Z",
     "iopub.execute_input": "2025-05-17T17:04:33.584938Z",
     "iopub.status.idle": "2025-05-17T17:04:34.197695Z",
     "shell.execute_reply.started": "2025-05-17T17:04:33.584917Z",
     "shell.execute_reply": "2025-05-17T17:04:34.196739Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:41.324789Z",
     "start_time": "2025-05-18T12:05:40.845298Z"
    }
   },
   "outputs": [],
   "execution_count": 28
  },
  {
   "cell_type": "code",
   "source": [
    "import os\n",
    "\n",
    "current_dir = '/kaggle/working'\n",
    "\n",
    "def solve(problems, name):\n",
    "    if len(problems) == 0:\n",
    "        return\n",
    "\n",
    "    dataset_name = f\"{current_dir}/{name}_solution.csv\"\n",
    "    stats_name = f\"{current_dir}/{name}_stats.csv\"\n",
    "\n",
    "    dataset = pd.read_csv(dataset_name) if os.path.exists(dataset_name) else pd.DataFrame()\n",
    "    stats = pd.read_csv(stats_name) if os.path.exists(stats_name) else pd.DataFrame()\n",
    "\n",
    "    for problem in tqdm(problems, desc=f\"Solving problems {name}\", unit=\"problem\"):\n",
    "        try:\n",
    "            names = stats['name'].values if stats.get('name', None) is not None else []\n",
    "            if not problem.name in names:\n",
    "                solution, stats_result = problem.solve_with_sb(logged=False)\n",
    "                dataset = pd.concat([dataset, solution], ignore_index=True)\n",
    "                stats_row = pd.DataFrame.from_dict(stats_result, orient='index').T\n",
    "                stats = pd.concat([stats, stats_row], ignore_index=True)\n",
    "                print(f\"Problem {problem.name} solved in {stats_result['time']} seconds\")\n",
    "                # overwrite dataset and stats files\n",
    "                dataset.to_csv(f\"{current_dir}/{name}_solution.csv\")\n",
    "                stats.to_csv(f\"{current_dir}/{name}_stats.csv\")\n",
    "            else:\n",
    "                print(f\"Problem {problem.name} already solved, skipping.\")\n",
    "        except AssertionError as e:\n",
    "            print(f\"Problem has no solution: {problem.name}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Error solving problem {problem.name}: {e}\")\n",
    "            continue\n"
   ],
   "metadata": {
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:34.198612Z",
     "iopub.execute_input": "2025-05-17T17:04:34.198862Z",
     "iopub.status.idle": "2025-05-17T17:04:34.207668Z",
     "shell.execute_reply.started": "2025-05-17T17:04:34.198843Z",
     "shell.execute_reply": "2025-05-17T17:04:34.206729Z"
    },
    "id": "Z12xMqd1OOKm",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:41.340053Z",
     "start_time": "2025-05-18T12:05:41.334283Z"
    }
   },
   "outputs": [],
   "execution_count": 29
  },
  {
   "cell_type": "code",
   "source": [
    "import kagglehub, os\n",
    "\n",
    "binpacking_setcover_path = kagglehub.dataset_download('elenaferr0/binpacking-setcover')\n",
    "dataset_files = [\n",
    "    f\"{binpacking_setcover_path}/BP_train_solution.csv\",\n",
    "    f\"{binpacking_setcover_path}/BP_test_solution.csv\",\n",
    "    f\"{binpacking_setcover_path}/SC_train_solution.csv\",\n",
    "    f\"{binpacking_setcover_path}/SC_test_solution.csv\"\n",
    "]\n",
    "\n",
    "all_generated = True # skip problem resolution if files exist\n",
    "for f in dataset_files:\n",
    "    if not os.path.isfile(f):\n",
    "        all_generated = False\n",
    "\n",
    "if not all_generated:\n",
    "    for name, problems in dataset.items():\n",
    "        print(f\"Solving {name} problems\")\n",
    "        solve(problems['train'], f\"{name}_train\")\n",
    "        print(f\"Solving {name} test problems\")\n",
    "        solve(problems['test'], f\"{name}_test\")"
   ],
   "metadata": {
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:34.208625Z",
     "iopub.execute_input": "2025-05-17T17:04:34.208901Z",
     "iopub.status.idle": "2025-05-17T17:04:34.322173Z",
     "shell.execute_reply.started": "2025-05-17T17:04:34.208878Z",
     "shell.execute_reply": "2025-05-17T17:04:34.321100Z"
    },
    "id": "plRCl7m5OOKo",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:41.837935Z",
     "start_time": "2025-05-18T12:05:41.471097Z"
    }
   },
   "outputs": [],
   "execution_count": 30
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Dataset loading (read generated csv files)"
   ],
   "metadata": {
    "id": "bf42f3b6b16c00eb"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "\n",
    "BP_train = pd.read_csv(f\"{binpacking_setcover_path}/BP_train_solution.csv\")\n",
    "BP_test = pd.read_csv(f\"{binpacking_setcover_path}/BP_test_solution.csv\")\n",
    "SC_train = pd.read_csv(f\"{binpacking_setcover_path}/SC_train_solution.csv\")\n",
    "SC_test = pd.read_csv(f\"{binpacking_setcover_path}/SC_test_solution.csv\")\n",
    "\n",
    "BP_train = BP_train.sample(frac=1, random_state=seed)\n",
    "BP_test = BP_test.sample(frac=1, random_state=seed)\n",
    "SC_train = SC_train.sample(frac=1, random_state=seed)\n",
    "SC_test = SC_test.sample(frac=1, random_state=seed)\n",
    "\n",
    "train = pd.concat([BP_train, SC_train], ignore_index=True)\n",
    "test = pd.concat([BP_test, SC_test], ignore_index=True)\n",
    "\n",
    "X_train = train.drop(columns=['score'])\n",
    "Y_train = train['score']\n",
    "\n",
    "X_test = test.drop(columns=['score'])\n",
    "Y_test = test['score']\n",
    "\n",
    "X = pd.concat([X_train, X_test], ignore_index=True)\n",
    "Y = pd.concat([Y_train, Y_test], ignore_index=True)"
   ],
   "metadata": {
    "id": "37f2508f27142e6a",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:34.325450Z",
     "iopub.execute_input": "2025-05-17T17:04:34.325786Z",
     "iopub.status.idle": "2025-05-17T17:04:35.324665Z",
     "shell.execute_reply.started": "2025-05-17T17:04:34.325761Z",
     "shell.execute_reply": "2025-05-17T17:04:35.323856Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:42.294834Z",
     "start_time": "2025-05-18T12:05:41.939094Z"
    }
   },
   "outputs": [],
   "execution_count": 31
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import f_regression\n",
    "\n",
    "kb = SelectKBest(f_regression, k=10).fit(X, Y)\n",
    "X_train_k_best = kb.transform(X_train)\n",
    "k_best_feat = kb.get_feature_names_out()\n",
    "X_test_k_best = kb.transform(X_test)"
   ],
   "metadata": {
    "id": "9e987e6daea235ff",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:35.325462Z",
     "iopub.execute_input": "2025-05-17T17:04:35.325735Z",
     "iopub.status.idle": "2025-05-17T17:04:35.380541Z",
     "shell.execute_reply.started": "2025-05-17T17:04:35.325716Z",
     "shell.execute_reply": "2025-05-17T17:04:35.379751Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:42.337165Z",
     "start_time": "2025-05-18T12:05:42.307644Z"
    }
   },
   "outputs": [],
   "execution_count": 32
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Preprocessing"
   ],
   "metadata": {
    "id": "a160174e3b2fd66c"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train_k_best)\n",
    "X_train_scaled = scaler.transform(X_train_k_best)\n",
    "X_test_scaled = scaler.transform(X_test_k_best)"
   ],
   "metadata": {
    "id": "d4ebac13f572ce36",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:35.381313Z",
     "iopub.execute_input": "2025-05-17T17:04:35.381555Z",
     "iopub.status.idle": "2025-05-17T17:04:35.402287Z",
     "shell.execute_reply.started": "2025-05-17T17:04:35.381537Z",
     "shell.execute_reply": "2025-05-17T17:04:35.401555Z"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:42.532893Z",
     "start_time": "2025-05-18T12:05:42.519061Z"
    }
   },
   "outputs": [],
   "execution_count": 33
  },
  {
   "cell_type": "markdown",
   "source": [
    "### PCA"
   ],
   "metadata": {
    "id": "e66e76e3f75efbe6"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# First PCA visualization\n",
    "pca1 = PCA(n_components=2)\n",
    "X_train_pca1 = pca1.fit_transform(X_train_scaled)\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "plt.title('PCA visualization of training data (2 components)')\n",
    "plt.scatter(X_train_pca1[:, 0], X_train_pca1[:, 1], alpha=0.5)\n",
    "plt.xlabel('First Principal Component')\n",
    "plt.ylabel('Second Principal Component')\n",
    "plt.show()"
   ],
   "metadata": {
    "id": "aa06e7a2c4f641d4",
    "outputId": "dcecbcd1-4a59-49d7-8c28-55daa2483009",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:35.403279Z",
     "iopub.execute_input": "2025-05-17T17:04:35.403773Z",
     "iopub.status.idle": "2025-05-17T17:04:36.018469Z",
     "shell.execute_reply.started": "2025-05-17T17:04:35.403744Z",
     "shell.execute_reply": "2025-05-17T17:04:36.017479Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 718
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:42.969933Z",
     "start_time": "2025-05-18T12:05:42.618353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 34
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, max_error\n",
    "import pandas as pd\n",
    "\n",
    "inference_times = pd.DataFrame()\n",
    "def predict_and_print_scores(model, X_test_scaled, Y_test, name):\n",
    "  global inference_times\n",
    "  start = datetime.now()\n",
    "  y_pred = model.predict(X_test_scaled)\n",
    "  end = datetime.now()\n",
    "\n",
    "  inference_time = end - start\n",
    "  r2 = r2_score(Y_test, y_pred)\n",
    "  mse = mean_squared_error(Y_test, y_pred)\n",
    "  mape = mean_absolute_percentage_error(Y_test, y_pred)\n",
    "  me = max_error(Y_test, y_pred)\n",
    "\n",
    "  print(f\"Test set evaluation metrics for {name}\")\n",
    "  print(\"Inference time\", end - start)\n",
    "  print(f\"Test set R² score: {r2:.4f}\")\n",
    "  print(f\"Test set MSE: {mse:.4f}\")\n",
    "  print(f\"Test set MAPE: {mape:.4f}\")\n",
    "  print(f\"Test set Max error: {me:.4f}\")\n",
    "\n",
    "  row = pd.Series({'name': name, 'r2': r2, 'mse': mse, 'mape': mape, 'me': me, 'inference_time': inference_time.total_seconds() })\n",
    "  inference_times = pd.concat([inference_times, row.to_frame().T], ignore_index=True)\n"
   ],
   "metadata": {
    "id": "hGkOQd-HAHrt",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:05:43.042276Z",
     "start_time": "2025-05-18T12:05:43.036122Z"
    }
   },
   "outputs": [],
   "execution_count": 35
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Extra Trees Regressor"
   ],
   "metadata": {
    "id": "9c5f697ab71c0078"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "params = {\n",
    "    \"n_estimators\": [10, 15, 20],\n",
    "    \"min_samples_leaf\": [5, 7, 10],\n",
    "    \"max_depth\": [5, 10, 20],\n",
    "}\n",
    "et = ExtraTreesRegressor(random_state=seed)\n",
    "gs = GridSearchCV(et, param_grid=params, cv=5, scoring='r2', return_train_score=True, n_jobs=-1, verbose=1)\n",
    "gs.fit(X_train_scaled, Y_train)\n",
    "\n",
    "print(\"Best score: \", gs.best_score_)\n",
    "print(\"Best params: \", gs.best_params_)\n",
    "\n",
    "model = gs.best_estimator_\n",
    "predict_and_print_scores(model, X_test_scaled, Y_test, 'ExtraTreeRegressor')"
   ],
   "metadata": {
    "id": "e94aaa4daa32cf6a",
    "outputId": "ff1674f0-db38-49a8-ccff-06660e493099",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:04:36.019571Z",
     "iopub.execute_input": "2025-05-17T17:04:36.019922Z",
     "iopub.status.idle": "2025-05-17T17:06:04.624375Z",
     "shell.execute_reply.started": "2025-05-17T17:04:36.019891Z",
     "shell.execute_reply": "2025-05-17T17:06:04.623172Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:11.227492Z",
     "start_time": "2025-05-18T12:05:43.141689Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 27 candidates, totalling 135 fits\n",
      "Best score:  0.96686097125022\n",
      "Best params:  {'max_depth': 20, 'min_samples_leaf': 7, 'n_estimators': 15}\n",
      "Test set evaluation metrics for ExtraTreeRegressor\n",
      "Inference time 0:00:00.027920\n",
      "Test set R² score: 0.9867\n",
      "Test set MSE: 0.9469\n",
      "Test set MAPE: 0.1197\n",
      "Test set Max error: 26.6265\n"
     ]
    }
   ],
   "execution_count": 36
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Single decision tree regressor"
   ],
   "metadata": {
    "id": "o3s0sEYtI95D"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "params = {\n",
    "    \"min_samples_leaf\": [5, 7, 10],\n",
    "    \"max_depth\": [5, 7, 10],\n",
    "}\n",
    "\n",
    "dt = DecisionTreeRegressor(random_state=seed)\n",
    "gs = GridSearchCV(dt, param_grid=params, cv=5, scoring='r2', return_train_score=True, n_jobs=-1, verbose=1)\n",
    "gs.fit(X_train_scaled, Y_train)\n",
    "\n",
    "print(\"Best score: \", gs.best_score_)\n",
    "print(\"Best params: \", gs.best_params_)\n",
    "\n",
    "model = gs.best_estimator_\n",
    "predict_and_print_scores(model, X_test_scaled, Y_test, 'DecisionTreeRegressor')"
   ],
   "metadata": {
    "id": "DU-3xyppIw0F",
    "outputId": "6ef6470c-1ac3-4035-9ade-67759f26b32a",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:06:04.625951Z",
     "iopub.execute_input": "2025-05-17T17:06:04.626428Z",
     "iopub.status.idle": "2025-05-17T17:06:25.044884Z",
     "shell.execute_reply.started": "2025-05-17T17:06:04.626387Z",
     "shell.execute_reply": "2025-05-17T17:06:25.043917Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:17.631710Z",
     "start_time": "2025-05-18T12:06:11.333607Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Best score:  0.9552235131562048\n",
      "Best params:  {'max_depth': 10, 'min_samples_leaf': 5}\n",
      "Test set evaluation metrics for DecisionTreeRegressor\n",
      "Inference time 0:00:00.002588\n",
      "Test set R² score: 0.9939\n",
      "Test set MSE: 0.4350\n",
      "Test set MAPE: 0.1222\n",
      "Test set Max error: 13.5337\n"
     ]
    }
   ],
   "execution_count": 37
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import Lasso\n",
    "from datetime import datetime\n",
    "\n",
    "param_grid = {\n",
    "    'alpha': [0.05, 0.1, 0.3, 0.5, 1, 2, 3]\n",
    "}\n",
    "\n",
    "gs = GridSearchCV(\n",
    "    Lasso(random_state=seed),\n",
    "    param_grid,\n",
    "    cv=5,\n",
    "    return_train_score=True,\n",
    "    n_jobs=-1,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "gs.fit(X_train_scaled, Y_train)\n",
    "\n",
    "print(\"Best score: \", gs.best_score_)\n",
    "print(\"Best params: \", gs.best_params_)\n",
    "\n",
    "model = gs.best_estimator_\n",
    "predict_and_print_scores(model, X_test_scaled, Y_test, 'Lasso')\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "A8SWTTPZ8vT9",
    "outputId": "acefac5f-c221-4ee2-d4ce-834bdef0c40d",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:19.040536Z",
     "start_time": "2025-05-18T12:06:17.714016Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 7 candidates, totalling 35 fits\n",
      "Best score:  0.750599780530234\n",
      "Best params:  {'alpha': 0.05}\n",
      "Test set evaluation metrics for Lasso\n",
      "Inference time 0:00:00.000404\n",
      "Test set R² score: 0.9631\n",
      "Test set MSE: 2.6360\n",
      "Test set MAPE: 0.2469\n",
      "Test set Max error: 25.6403\n"
     ]
    }
   ],
   "execution_count": 38
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, max_error\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from datetime import datetime\n",
    "\n",
    "lr = LinearRegression()\n",
    "lr.fit(X_train_scaled, Y_train)\n",
    "predict_and_print_scores(lr, X_test_scaled, Y_test, 'LinearRegression')"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QII9lmFg-CZh",
    "outputId": "8c6420fe-4e64-4ea1-8674-708cfff1f09d",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:19.116997Z",
     "start_time": "2025-05-18T12:06:19.068495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set evaluation metrics for LinearRegression\n",
      "Inference time 0:00:00.000348\n",
      "Test set R² score: 0.9608\n",
      "Test set MSE: 2.7999\n",
      "Test set MAPE: 0.2687\n",
      "Test set Max error: 25.9080\n"
     ]
    }
   ],
   "execution_count": 39
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, max_error\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVR\n",
    "from datetime import datetime\n",
    "\n",
    "param_grid = {\n",
    "    'kernel': ['linear'],\n",
    "    'C': [0.1],\n",
    "    'gamma': [0.1],\n",
    "    'epsilon': [0.1]\n",
    "}\n",
    "\n",
    "gs = GridSearchCV(\n",
    "    SVR(),\n",
    "    param_grid,\n",
    "    cv=5,\n",
    "    scoring='r2',\n",
    "    return_train_score=True,\n",
    "    n_jobs=-1,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "gs.fit(X_train_scaled, Y_train)\n",
    "\n",
    "print(\"Best score: \", gs.best_score_)\n",
    "print(\"Best params: \", gs.best_params_)\n",
    "\n",
    "model = gs.best_estimator_\n",
    "predict_and_print_scores(model, X_test_scaled, Y_test, 'SVR')\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hc7PBGgn-T0l",
    "outputId": "1abd392d-1cb2-483d-a4ce-69ab732b5ddb",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:28.025288Z",
     "start_time": "2025-05-18T12:06:19.258123Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[0;32mIn[40], line 23\u001B[0m\n\u001B[1;32m      6\u001B[0m param_grid \u001B[38;5;241m=\u001B[39m {\n\u001B[1;32m      7\u001B[0m     \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mkernel\u001B[39m\u001B[38;5;124m'\u001B[39m: [\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mlinear\u001B[39m\u001B[38;5;124m'\u001B[39m],\n\u001B[1;32m      8\u001B[0m     \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mC\u001B[39m\u001B[38;5;124m'\u001B[39m: [\u001B[38;5;241m0.1\u001B[39m],\n\u001B[1;32m      9\u001B[0m     \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mgamma\u001B[39m\u001B[38;5;124m'\u001B[39m: [\u001B[38;5;241m0.1\u001B[39m],\n\u001B[1;32m     10\u001B[0m     \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mepsilon\u001B[39m\u001B[38;5;124m'\u001B[39m: [\u001B[38;5;241m0.1\u001B[39m]\n\u001B[1;32m     11\u001B[0m }\n\u001B[1;32m     13\u001B[0m gs \u001B[38;5;241m=\u001B[39m GridSearchCV(\n\u001B[1;32m     14\u001B[0m     SVR(),\n\u001B[1;32m     15\u001B[0m     param_grid,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m     20\u001B[0m     verbose\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m1\u001B[39m\n\u001B[1;32m     21\u001B[0m )\n\u001B[0;32m---> 23\u001B[0m \u001B[43mgs\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX_train_scaled\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mY_train\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     25\u001B[0m \u001B[38;5;28mprint\u001B[39m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mBest score: \u001B[39m\u001B[38;5;124m\"\u001B[39m, gs\u001B[38;5;241m.\u001B[39mbest_score_)\n\u001B[1;32m     26\u001B[0m \u001B[38;5;28mprint\u001B[39m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mBest params: \u001B[39m\u001B[38;5;124m\"\u001B[39m, gs\u001B[38;5;241m.\u001B[39mbest_params_)\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/base.py:1389\u001B[0m, in \u001B[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001B[0;34m(estimator, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1382\u001B[0m     estimator\u001B[38;5;241m.\u001B[39m_validate_params()\n\u001B[1;32m   1384\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m config_context(\n\u001B[1;32m   1385\u001B[0m     skip_parameter_validation\u001B[38;5;241m=\u001B[39m(\n\u001B[1;32m   1386\u001B[0m         prefer_skip_nested_validation \u001B[38;5;129;01mor\u001B[39;00m global_skip_validation\n\u001B[1;32m   1387\u001B[0m     )\n\u001B[1;32m   1388\u001B[0m ):\n\u001B[0;32m-> 1389\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfit_method\u001B[49m\u001B[43m(\u001B[49m\u001B[43mestimator\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/model_selection/_search.py:1024\u001B[0m, in \u001B[0;36mBaseSearchCV.fit\u001B[0;34m(self, X, y, **params)\u001B[0m\n\u001B[1;32m   1018\u001B[0m     results \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_format_results(\n\u001B[1;32m   1019\u001B[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001B[1;32m   1020\u001B[0m     )\n\u001B[1;32m   1022\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m results\n\u001B[0;32m-> 1024\u001B[0m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_run_search\u001B[49m\u001B[43m(\u001B[49m\u001B[43mevaluate_candidates\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1026\u001B[0m \u001B[38;5;66;03m# multimetric is determined here because in the case of a callable\u001B[39;00m\n\u001B[1;32m   1027\u001B[0m \u001B[38;5;66;03m# self.scoring the return type is only known after calling\u001B[39;00m\n\u001B[1;32m   1028\u001B[0m first_test_score \u001B[38;5;241m=\u001B[39m all_out[\u001B[38;5;241m0\u001B[39m][\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mtest_scores\u001B[39m\u001B[38;5;124m\"\u001B[39m]\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/model_selection/_search.py:1571\u001B[0m, in \u001B[0;36mGridSearchCV._run_search\u001B[0;34m(self, evaluate_candidates)\u001B[0m\n\u001B[1;32m   1569\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m\u001B[38;5;250m \u001B[39m\u001B[38;5;21m_run_search\u001B[39m(\u001B[38;5;28mself\u001B[39m, evaluate_candidates):\n\u001B[1;32m   1570\u001B[0m \u001B[38;5;250m    \u001B[39m\u001B[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001B[39;00m\n\u001B[0;32m-> 1571\u001B[0m     \u001B[43mevaluate_candidates\u001B[49m\u001B[43m(\u001B[49m\u001B[43mParameterGrid\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mparam_grid\u001B[49m\u001B[43m)\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/model_selection/_search.py:970\u001B[0m, in \u001B[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001B[0;34m(candidate_params, cv, more_results)\u001B[0m\n\u001B[1;32m    962\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mverbose \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m0\u001B[39m:\n\u001B[1;32m    963\u001B[0m     \u001B[38;5;28mprint\u001B[39m(\n\u001B[1;32m    964\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mFitting \u001B[39m\u001B[38;5;132;01m{0}\u001B[39;00m\u001B[38;5;124m folds for each of \u001B[39m\u001B[38;5;132;01m{1}\u001B[39;00m\u001B[38;5;124m candidates,\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    965\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m totalling \u001B[39m\u001B[38;5;132;01m{2}\u001B[39;00m\u001B[38;5;124m fits\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;241m.\u001B[39mformat(\n\u001B[1;32m    966\u001B[0m             n_splits, n_candidates, n_candidates \u001B[38;5;241m*\u001B[39m n_splits\n\u001B[1;32m    967\u001B[0m         )\n\u001B[1;32m    968\u001B[0m     )\n\u001B[0;32m--> 970\u001B[0m out \u001B[38;5;241m=\u001B[39m \u001B[43mparallel\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    971\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdelayed\u001B[49m\u001B[43m(\u001B[49m\u001B[43m_fit_and_score\u001B[49m\u001B[43m)\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    972\u001B[0m \u001B[43m        \u001B[49m\u001B[43mclone\u001B[49m\u001B[43m(\u001B[49m\u001B[43mbase_estimator\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    973\u001B[0m \u001B[43m        \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    974\u001B[0m \u001B[43m        \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    975\u001B[0m \u001B[43m        \u001B[49m\u001B[43mtrain\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mtrain\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    976\u001B[0m \u001B[43m        \u001B[49m\u001B[43mtest\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mtest\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    977\u001B[0m \u001B[43m        \u001B[49m\u001B[43mparameters\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mparameters\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    978\u001B[0m \u001B[43m        \u001B[49m\u001B[43msplit_progress\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43msplit_idx\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mn_splits\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    979\u001B[0m \u001B[43m        \u001B[49m\u001B[43mcandidate_progress\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mcand_idx\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mn_candidates\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    980\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mfit_and_score_kwargs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    981\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    982\u001B[0m \u001B[43m    \u001B[49m\u001B[38;5;28;43;01mfor\u001B[39;49;00m\u001B[43m \u001B[49m\u001B[43m(\u001B[49m\u001B[43mcand_idx\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mparameters\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43m(\u001B[49m\u001B[43msplit_idx\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43m(\u001B[49m\u001B[43mtrain\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mtest\u001B[49m\u001B[43m)\u001B[49m\u001B[43m)\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;129;43;01min\u001B[39;49;00m\u001B[43m \u001B[49m\u001B[43mproduct\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    983\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43menumerate\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mcandidate_params\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    984\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43menumerate\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mcv\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msplit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mrouted_params\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msplitter\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msplit\u001B[49m\u001B[43m)\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    985\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    986\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    988\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(out) \u001B[38;5;241m<\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m    989\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[1;32m    990\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mNo fits were performed. \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    991\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mWas the CV iterator empty? \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    992\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mWere there no candidates?\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    993\u001B[0m     )\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/utils/parallel.py:77\u001B[0m, in \u001B[0;36mParallel.__call__\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m     72\u001B[0m config \u001B[38;5;241m=\u001B[39m get_config()\n\u001B[1;32m     73\u001B[0m iterable_with_config \u001B[38;5;241m=\u001B[39m (\n\u001B[1;32m     74\u001B[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001B[1;32m     75\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m delayed_func, args, kwargs \u001B[38;5;129;01min\u001B[39;00m iterable\n\u001B[1;32m     76\u001B[0m )\n\u001B[0;32m---> 77\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43msuper\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[38;5;21;43m__call__\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43miterable_with_config\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib/python3.9/site-packages/joblib/parallel.py:2071\u001B[0m, in \u001B[0;36mParallel.__call__\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m   2065\u001B[0m \u001B[38;5;66;03m# The first item from the output is blank, but it makes the interpreter\u001B[39;00m\n\u001B[1;32m   2066\u001B[0m \u001B[38;5;66;03m# progress until it enters the Try/Except block of the generator and\u001B[39;00m\n\u001B[1;32m   2067\u001B[0m \u001B[38;5;66;03m# reaches the first `yield` statement. This starts the asynchronous\u001B[39;00m\n\u001B[1;32m   2068\u001B[0m \u001B[38;5;66;03m# dispatch of the tasks to the workers.\u001B[39;00m\n\u001B[1;32m   2069\u001B[0m \u001B[38;5;28mnext\u001B[39m(output)\n\u001B[0;32m-> 2071\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m output \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mreturn_generator \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;28;43mlist\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43moutput\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib/python3.9/site-packages/joblib/parallel.py:1681\u001B[0m, in \u001B[0;36mParallel._get_outputs\u001B[0;34m(self, iterator, pre_dispatch)\u001B[0m\n\u001B[1;32m   1678\u001B[0m     \u001B[38;5;28;01myield\u001B[39;00m\n\u001B[1;32m   1680\u001B[0m     \u001B[38;5;28;01mwith\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_backend\u001B[38;5;241m.\u001B[39mretrieval_context():\n\u001B[0;32m-> 1681\u001B[0m         \u001B[38;5;28;01myield from\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_retrieve()\n\u001B[1;32m   1683\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mGeneratorExit\u001B[39;00m:\n\u001B[1;32m   1684\u001B[0m     \u001B[38;5;66;03m# The generator has been garbage collected before being fully\u001B[39;00m\n\u001B[1;32m   1685\u001B[0m     \u001B[38;5;66;03m# consumed. This aborts the remaining tasks if possible and warn\u001B[39;00m\n\u001B[1;32m   1686\u001B[0m     \u001B[38;5;66;03m# the user if necessary.\u001B[39;00m\n\u001B[1;32m   1687\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_exception \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mTrue\u001B[39;00m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib/python3.9/site-packages/joblib/parallel.py:1799\u001B[0m, in \u001B[0;36mParallel._retrieve\u001B[0;34m(self)\u001B[0m\n\u001B[1;32m   1788\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mreturn_ordered:\n\u001B[1;32m   1789\u001B[0m     \u001B[38;5;66;03m# Case ordered: wait for completion (or error) of the next job\u001B[39;00m\n\u001B[1;32m   1790\u001B[0m     \u001B[38;5;66;03m# that have been dispatched and not retrieved yet. If no job\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1794\u001B[0m     \u001B[38;5;66;03m# control only have to be done on the amount of time the next\u001B[39;00m\n\u001B[1;32m   1795\u001B[0m     \u001B[38;5;66;03m# dispatched job is pending.\u001B[39;00m\n\u001B[1;32m   1796\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m (nb_jobs \u001B[38;5;241m==\u001B[39m \u001B[38;5;241m0\u001B[39m) \u001B[38;5;129;01mor\u001B[39;00m (\n\u001B[1;32m   1797\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_jobs[\u001B[38;5;241m0\u001B[39m]\u001B[38;5;241m.\u001B[39mget_status(timeout\u001B[38;5;241m=\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mtimeout) \u001B[38;5;241m==\u001B[39m TASK_PENDING\n\u001B[1;32m   1798\u001B[0m     ):\n\u001B[0;32m-> 1799\u001B[0m         \u001B[43mtime\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msleep\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m0.01\u001B[39;49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1800\u001B[0m         \u001B[38;5;28;01mcontinue\u001B[39;00m\n\u001B[1;32m   1802\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m nb_jobs \u001B[38;5;241m==\u001B[39m \u001B[38;5;241m0\u001B[39m:\n\u001B[1;32m   1803\u001B[0m     \u001B[38;5;66;03m# Case unordered: jobs are added to the list of jobs to\u001B[39;00m\n\u001B[1;32m   1804\u001B[0m     \u001B[38;5;66;03m# retrieve `self._jobs` only once completed or in error, which\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1810\u001B[0m     \u001B[38;5;66;03m# timeouts before any other dispatched job has completed and\u001B[39;00m\n\u001B[1;32m   1811\u001B[0m     \u001B[38;5;66;03m# been added to `self._jobs` to be retrieved.\u001B[39;00m\n",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
     ]
    }
   ],
   "execution_count": 40
  },
  {
   "cell_type": "markdown",
   "source": [
    "# imodels rules"
   ],
   "metadata": {
    "id": "5WWUqbCeiBHe"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "!pip install imodels"
   ],
   "metadata": {
    "id": "ItPIIGHQC8a2",
    "outputId": "1e5ffed7-3c61-4e0b-e4bf-301d3f48007f",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:06:25.045962Z",
     "iopub.execute_input": "2025-05-17T17:06:25.046748Z",
     "iopub.status.idle": "2025-05-17T17:06:28.837975Z",
     "shell.execute_reply.started": "2025-05-17T17:06:25.046723Z",
     "shell.execute_reply": "2025-05-17T17:06:28.836723Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:32.917290Z",
     "start_time": "2025-05-18T12:06:32.062326Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imodels in ./.venv/lib/python3.9/site-packages (2.0.0)\r\n",
      "Requirement already satisfied: matplotlib in ./.venv/lib64/python3.9/site-packages (from imodels) (3.9.4)\r\n",
      "Requirement already satisfied: mlxtend>=0.18.0 in ./.venv/lib/python3.9/site-packages (from imodels) (0.23.4)\r\n",
      "Requirement already satisfied: numpy in ./.venv/lib64/python3.9/site-packages (from imodels) (2.0.2)\r\n",
      "Requirement already satisfied: pandas in ./.venv/lib64/python3.9/site-packages (from imodels) (2.2.3)\r\n",
      "Requirement already satisfied: requests in ./.venv/lib/python3.9/site-packages (from imodels) (2.32.3)\r\n",
      "Requirement already satisfied: scipy in ./.venv/lib64/python3.9/site-packages (from imodels) (1.13.1)\r\n",
      "Requirement already satisfied: scikit-learn>=1.2.0 in ./.venv/lib64/python3.9/site-packages (from imodels) (1.6.1)\r\n",
      "Requirement already satisfied: tqdm in ./.venv/lib/python3.9/site-packages (from imodels) (4.67.1)\r\n",
      "Requirement already satisfied: joblib>=0.13.2 in ./.venv/lib/python3.9/site-packages (from mlxtend>=0.18.0->imodels) (1.5.0)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in ./.venv/lib64/python3.9/site-packages (from matplotlib->imodels) (1.3.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in ./.venv/lib/python3.9/site-packages (from matplotlib->imodels) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in ./.venv/lib64/python3.9/site-packages (from matplotlib->imodels) (4.57.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in ./.venv/lib64/python3.9/site-packages (from matplotlib->imodels) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in ./.venv/lib/python3.9/site-packages (from matplotlib->imodels) (25.0)\r\n",
      "Requirement already satisfied: pillow>=8 in ./.venv/lib64/python3.9/site-packages (from matplotlib->imodels) (11.2.1)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in ./.venv/lib/python3.9/site-packages (from matplotlib->imodels) (3.2.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in ./.venv/lib/python3.9/site-packages (from matplotlib->imodels) (2.9.0.post0)\r\n",
      "Requirement already satisfied: importlib-resources>=3.2.0 in ./.venv/lib/python3.9/site-packages (from matplotlib->imodels) (6.5.2)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in ./.venv/lib/python3.9/site-packages (from pandas->imodels) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in ./.venv/lib/python3.9/site-packages (from pandas->imodels) (2025.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in ./.venv/lib/python3.9/site-packages (from scikit-learn>=1.2.0->imodels) (3.6.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in ./.venv/lib64/python3.9/site-packages (from requests->imodels) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in ./.venv/lib/python3.9/site-packages (from requests->imodels) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in ./.venv/lib/python3.9/site-packages (from requests->imodels) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./.venv/lib/python3.9/site-packages (from requests->imodels) (2025.4.26)\r\n",
      "Requirement already satisfied: zipp>=3.1.0 in ./.venv/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib->imodels) (3.21.0)\r\n",
      "Requirement already satisfied: six>=1.5 in ./.venv/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib->imodels) (1.17.0)\r\n",
      "\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m A new release of pip is available: \u001B[0m\u001B[31;49m25.0.1\u001B[0m\u001B[39;49m -> \u001B[0m\u001B[32;49m25.1.1\u001B[0m\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m To update, run: \u001B[0m\u001B[32;49mpip install --upgrade pip\u001B[0m\r\n"
     ]
    }
   ],
   "execution_count": 41
  },
  {
   "cell_type": "code",
   "source": [
    "from imodels import GreedyTreeRegressor\n",
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, max_error\n",
    "from datetime import datetime\n",
    "\n",
    "params = [\n",
    "  { 'min_samples_leaf': 5, 'max_depth': 5, 'max_features': 'sqrt'}\n",
    "]\n",
    "\n",
    "for p in params: # TODO: add cv\n",
    "  mdl = GreedyTreeRegressor(min_samples_leaf=p['min_samples_leaf'], max_depth=p['max_depth'], max_features=p['max_features'])\n",
    "  mdl.fit(X_train_scaled, Y_train, feature_names=k_best_feat)\n",
    "  predict_and_print_scores(mdl, X_test_scaled, Y_test, 'GreedyTreeRegressor')\n",
    "# print(mdl)"
   ],
   "metadata": {
    "id": "ouPeUAZNHz_f",
    "outputId": "6aa12951-fb67-438e-b128-4f7fc13bbcd7",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:07:12.210783Z",
     "iopub.execute_input": "2025-05-17T17:07:12.211204Z",
     "iopub.status.idle": "2025-05-17T17:07:12.233023Z",
     "shell.execute_reply.started": "2025-05-17T17:07:12.211174Z",
     "shell.execute_reply": "2025-05-17T17:07:12.231680Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:33.205162Z",
     "start_time": "2025-05-18T12:06:32.981663Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set evaluation metrics for GreedyTreeRegressor\n",
      "Inference time 0:00:00.000676\n",
      "Test set R² score: 0.9078\n",
      "Test set MSE: 6.5773\n",
      "Test set MAPE: 0.1943\n",
      "Test set Max error: 64.9134\n"
     ]
    }
   ],
   "execution_count": 42
  },
  {
   "cell_type": "code",
   "source": [
    "from imodels import BoostedRulesRegressor\n",
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, max_error\n",
    "from datetime import datetime\n",
    "\n",
    "dt = DecisionTreeRegressor(random_state=seed, max_depth=4, min_samples_leaf=5)\n",
    "mdl = BoostedRulesRegressor(estimator=dt, n_estimators=1)\n",
    "mdl.fit(X_train_scaled, Y_train, feature_names=k_best_feat)\n",
    "predict_and_print_scores(mdl, X_test_scaled, Y_test, 'BoostedRulesRegressor')"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "N771M6MqQgOA",
    "outputId": "ddc8b437-3fe5-4130-d180-01e3ffd4f2fd",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:33.555494Z",
     "start_time": "2025-05-18T12:06:33.267046Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set evaluation metrics for BoostedRulesRegressor\n",
      "Inference time 0:00:00.001521\n",
      "Test set R² score: 0.9872\n",
      "Test set MSE: 0.9106\n",
      "Test set MAPE: 0.1896\n",
      "Test set Max error: 10.9938\n"
     ]
    }
   ],
   "execution_count": 43
  },
  {
   "cell_type": "code",
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(inference_times['name'], inference_times['inference_time'], color='skyblue')\n",
    "plt.xlabel('Model Name')\n",
    "plt.ylabel('Inference Time (ms)')\n",
    "plt.title('Inference Time per Model')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 607
    },
    "id": "nCmfSNN3C7Eh",
    "outputId": "26a33682-174b-41ee-cbc8-48b7b75d0f7b",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:33.821700Z",
     "start_time": "2025-05-18T12:06:33.620027Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 44
  },
  {
   "cell_type": "code",
   "source": [
    "metrics_to_plot = {\n",
    "    'R² Score': 'r2',\n",
    "    'Mean Squared Error (MSE)': 'mse',\n",
    "    'Mean Absolute Percentage Error (MAPE)': 'mape',\n",
    "    'Max Error (ME)': 'me'\n",
    "}\n",
    "\n",
    "colors = ['skyblue', 'salmon', 'lightgreen', 'purple']\n",
    "\n",
    "n_metrics = len(metrics_to_plot)\n",
    "n_cols = 2\n",
    "n_rows = (n_metrics + n_cols - 1) // n_cols\n",
    "\n",
    "fig, axes = plt.subplots(n_rows, n_cols, figsize=(14, n_rows * 6))\n",
    "axes = axes.ravel()\n",
    "\n",
    "for i, (metric_name, metric_col) in enumerate(metrics_to_plot.items()):\n",
    "    ax = axes[i]\n",
    "    ax.scatter(inference_times[metric_col], inference_times['inference_time'], color=colors[i % len(colors)])\n",
    "    ax.set_xlabel(metric_name)\n",
    "    ax.set_ylabel('Inference Time (ms)')\n",
    "    ax.set_title(f'Trade-off: {metric_name} vs. Inference Time')\n",
    "    ax.grid(True)\n",
    "    for j, row in inference_times.iterrows():\n",
    "        ax.annotate(row['name'], (row[metric_col], row['inference_time']), textcoords=\"offset points\", xytext=(5,-5), ha='left')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "wY8uJQQ2Hj26",
    "outputId": "b334f1b4-f1cd-4e60-dfdf-e7747f9e79fc",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:34.378804Z",
     "start_time": "2025-05-18T12:06:33.888368Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1400x1200 with 4 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 45
  },
  {
   "cell_type": "markdown",
   "source": [
    "- For R² plots: The ideal models are towards the bottom-right (high R², low inference time).\n",
    "- For MSE, MAPE, ME plots: The ideal models are towards the bottom-left (low error, low inference time)."
   ],
   "metadata": {
    "id": "4hzWcXj-JCvp"
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## RIPPER"
   ],
   "metadata": {
    "id": "-TpVpR-XLoo9"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "!pip install wittgenstein"
   ],
   "metadata": {
    "id": "yDMttlUKweaz",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:06:28.874666Z",
     "iopub.status.idle": "2025-05-17T17:06:28.875090Z",
     "shell.execute_reply.started": "2025-05-17T17:06:28.874867Z",
     "shell.execute_reply": "2025-05-17T17:06:28.874884Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "outputId": "05cf1203-97c7-4bcd-84fc-5a551d589638",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:35.260846Z",
     "start_time": "2025-05-18T12:06:34.448021Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wittgenstein in ./.venv/lib/python3.9/site-packages (0.3.4)\r\n",
      "Requirement already satisfied: pandas in ./.venv/lib64/python3.9/site-packages (from wittgenstein) (2.2.3)\r\n",
      "Requirement already satisfied: numpy in ./.venv/lib64/python3.9/site-packages (from wittgenstein) (2.0.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in ./.venv/lib/python3.9/site-packages (from pandas->wittgenstein) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in ./.venv/lib/python3.9/site-packages (from pandas->wittgenstein) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in ./.venv/lib/python3.9/site-packages (from pandas->wittgenstein) (2025.2)\r\n",
      "Requirement already satisfied: six>=1.5 in ./.venv/lib/python3.9/site-packages (from python-dateutil>=2.8.2->pandas->wittgenstein) (1.17.0)\r\n",
      "\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m A new release of pip is available: \u001B[0m\u001B[31;49m25.0.1\u001B[0m\u001B[39;49m -> \u001B[0m\u001B[32;49m25.1.1\u001B[0m\r\n",
      "\u001B[1m[\u001B[0m\u001B[34;49mnotice\u001B[0m\u001B[1;39;49m]\u001B[0m\u001B[39;49m To update, run: \u001B[0m\u001B[32;49mpip install --upgrade pip\u001B[0m\r\n"
     ]
    }
   ],
   "execution_count": 46
  },
  {
   "cell_type": "code",
   "source": [
    "import wittgenstein as lw\n",
    "\n",
    "ripper_clf = lw.RIPPER()\n",
    "\n",
    "from sklearn.ensemble import StackingClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import KBinsDiscretizer\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.metrics import accuracy_score, f1_score, confusion_matrix, precision_score, recall_score\n",
    "from datetime import datetime\n",
    "\n",
    "train_indices = np.random.permutation(X_train_k_best.shape[0])\n",
    "test_indices = np.random.permutation(X_test_k_best.shape[0])\n",
    "\n",
    "train_indices = train_indices[:5000]\n",
    "test_indices = test_indices[:1000]\n",
    "\n",
    "X_sample_train = X_train_k_best[train_indices]\n",
    "Y_sample_train = Y_train[train_indices]\n",
    "X_sample_test = X_test_k_best[test_indices]\n",
    "Y_sample_test = Y_test[test_indices]\n",
    "\n",
    "kb = KBinsDiscretizer(n_bins=2, strategy=\"quantile\", encode='ordinal')\n",
    "Y_train_encoded = kb.fit_transform(Y_sample_train.values.reshape(-1, 1))\n",
    "Y_test_encoded = kb.fit_transform(Y_sample_test.values.reshape(-1, 1))\n",
    "\n",
    "ripper_clf.fit(X_sample_train, Y_train_encoded, pos_class=1)  # TODO: add feature names\n",
    "\n",
    "start = datetime.now()\n",
    "preds = ripper_clf.predict(X_sample_test)\n",
    "end = datetime.now()\n",
    "print(\"Time: \", end - start)\n",
    "print(\"Accuracy: \", accuracy_score(Y_test_encoded, preds))\n",
    "print(\"F1 score: \", f1_score(Y_test_encoded, preds))\n",
    "print(\"Recall score:\", recall_score(Y_test_encoded, preds))\n",
    "print(\"Precision score:\", precision_score(Y_test_encoded, preds))\n",
    "print(\"Confusion matrix\", confusion_matrix(Y_test_encoded, preds))\n",
    "print(ripper_clf.out_model())"
   ],
   "metadata": {
    "id": "hmhzgK8zcS52",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:06:28.876134Z",
     "iopub.status.idle": "2025-05-17T17:06:28.876414Z",
     "shell.execute_reply.started": "2025-05-17T17:06:28.876286Z",
     "shell.execute_reply": "2025-05-17T17:06:28.876300Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "outputId": "475e9542-1c78-4413-83f3-714c3626a712",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:36.612810Z",
     "start_time": "2025-05-18T12:06:35.339091Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time:  0:00:00.045284\n",
      "Accuracy:  0.753\n",
      "F1 score:  0.7658767772511849\n",
      "Recall score: 0.808\n",
      "Precision score: 0.7279279279279279\n",
      "Confusion matrix [[349 151]\n",
      " [ 96 404]]\n",
      "[[1=>0.0052 ^ 8=0.097-0.53] V\n",
      "[1=>0.0052 ^ 8=-0.031-0.097 ^ 7=-2.43--1.95] V\n",
      "[1=>0.0052 ^ 7=-1.95--1.41] V\n",
      "[1=>0.0052 ^ 7=-3.0--2.43 ^ 8=-0.031-0.097] V\n",
      "[1=>0.0052 ^ 6=-1.94--0.86 ^ 0=0.97-1.0] V\n",
      "[1=>0.0052 ^ 6=-2.81--1.94 ^ 4=-0.062-0.0] V\n",
      "[1=>0.0052 ^ 7=-3.0--2.43 ^ 8=-0.11--0.031] V\n",
      "[1=>0.0052 ^ 7=-2.43--1.95 ^ 0=0.97-1.0] V\n",
      "[4=-0.062-0.0 ^ 7=-3.0--2.43 ^ 8=-0.19--0.11 ^ 6=-0.39--0.2] V\n",
      "[4=-0.062-0.0 ^ 9=>1.04 ^ 8=>0.53] V\n",
      "[4=-0.062-0.0 ^ 7=-3.0--2.43 ^ 1=>0.0052 ^ 8=-0.26--0.19 ^ 6=-0.39--0.2] V\n",
      "[4=-0.062-0.0 ^ 7=-3.0--2.43 ^ 8=-0.19--0.11 ^ 6=-0.2--0.054 ^ 9=0.78-0.9] V\n",
      "[4=-0.062-0.0 ^ 7=-3.0--2.43 ^ 8=-0.19--0.11 ^ 6=-0.86--0.39 ^ 9=0.59-0.78] V\n",
      "[4=-0.062-0.0 ^ 8=-0.031-0.097 ^ 7=-1.41--0.83] V\n",
      "[4=-0.062-0.0 ^ 7=-3.0--2.43 ^ 1=>0.0052 ^ 8=-0.19--0.11] V\n",
      "[4=-0.062-0.0 ^ 6=-3.72--2.81 ^ 1=>0.0052 ^ 8=-0.26--0.19 ^ 7=-0.83--0.4 ^ 9=<-0.019]]\n",
      "None\n"
     ]
    }
   ],
   "execution_count": 47
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "fpr, tpr, _ = roc_curve(Y_test_encoded, preds)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=2,\n",
    "         label=f'ROC curve (AUC = {roc_auc:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve with Cross Validation')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ],
   "metadata": {
    "id": "ulULGbhUd4Ns",
    "trusted": true,
    "execution": {
     "iopub.status.busy": "2025-05-17T17:06:28.877688Z",
     "iopub.status.idle": "2025-05-17T17:06:28.877961Z",
     "shell.execute_reply.started": "2025-05-17T17:06:28.877836Z",
     "shell.execute_reply": "2025-05-17T17:06:28.877847Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "outputId": "472f3b79-6f32-4471-bec8-b08869f0e668",
    "ExecuteTime": {
     "end_time": "2025-05-18T12:06:36.781154Z",
     "start_time": "2025-05-18T12:06:36.679428Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 48
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-18T12:08:23.947356Z",
     "start_time": "2025-05-18T12:08:23.910194Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from pyscipopt import Model, Branchrule\n",
    "from pyscipopt import SCIP_RESULT\n",
    "import numpy as np\n",
    "from collections import defaultdict\n",
    "import pandas as pd\n",
    "from features import Params, compute_features\n",
    "\n",
    "class LearnedStrongBranching(Branchrule):\n",
    "    def __init__(self, model, predictor, A, b, c, logged, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        self.model: Model = model\n",
    "        self.predictor = predictor\n",
    "        self.A = A\n",
    "        self.b = b\n",
    "        self.c = c\n",
    "        self.logged = logged\n",
    "        self.n_branches_by_var = defaultdict(int)\n",
    "        self.obj_increases_by_var = defaultdict(list)\n",
    "\n",
    "    def branchexeclp(self, allowaddcons):\n",
    "        branch_cands, branch_cand_sols, branch_cand_fracs, ncands, npriocands, nimplcands = self.model.getLPBranchCands()\n",
    "\n",
    "        # Initialise scores for each variable\n",
    "        scores = [-self.model.infinity() for _ in range(npriocands)]\n",
    "        down_bounds = [None for _ in range(npriocands)]\n",
    "        up_bounds = [None for _ in range(npriocands)]\n",
    "\n",
    "        # Initialise placeholder values\n",
    "        num_nodes = self.model.getNNodes()\n",
    "        lpobjval = self.model.getLPObjVal()\n",
    "        lperror = False\n",
    "        best_cand_idx = 0\n",
    "        best_cand_gain = 0\n",
    "\n",
    "        # Start strong branching and iterate over the branching candidates\n",
    "        self.model.startStrongbranch()\n",
    "        for i in range(npriocands):\n",
    "\n",
    "            # Check the case that the variable has already been strong branched on at this node.\n",
    "            # This case occurs when events happen in the node that should be handled immediately.\n",
    "            # When processing the node again (because the event did not remove it), there's no need to duplicate work.\n",
    "            if self.model.getVarStrongbranchNode(branch_cands[i]) == num_nodes:\n",
    "                down, up, downvalid, upvalid, _, lastlpobjval = self.model.getVarStrongbranchLast(branch_cands[i])\n",
    "                if downvalid:\n",
    "                    down_bounds[i] = down\n",
    "                if upvalid:\n",
    "                    up_bounds[i] = up\n",
    "                downgain = max([down - lastlpobjval, 0])\n",
    "                upgain = max([up - lastlpobjval, 0])\n",
    "                scores[i] = self.compute_score(branch_cand_fracs[i], branch_cands[i], downgain, upgain)\n",
    "                continue\n",
    "\n",
    "            # Strong branch\n",
    "            down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror = self.model.getVarStrongbranch(\n",
    "                branch_cands[i], 200, idempotent=False)\n",
    "\n",
    "            # In the case of an LP error handle appropriately (for this example we just break the loop)\n",
    "            if lperror:\n",
    "                break\n",
    "\n",
    "            # In the case of both infeasible sub-problems cutoff the node\n",
    "            if downinf and upinf:\n",
    "                return {\"result\": SCIP_RESULT.CUTOFF}\n",
    "\n",
    "            # Calculate the gains for each up and down node that strong branching explored\n",
    "            if not downinf and downvalid:\n",
    "                down_bounds[i] = down\n",
    "                downgain = max([down - lpobjval, 0])\n",
    "            else:\n",
    "                downgain = 0\n",
    "            if not upinf and upvalid:\n",
    "                up_bounds[i] = up\n",
    "                upgain = max([up - lpobjval, 0])\n",
    "            else:\n",
    "                upgain = 0\n",
    "\n",
    "            # Update the pseudo-costs\n",
    "            lpsol = branch_cands[i].getLPSol()\n",
    "            if not downinf and downvalid:\n",
    "                self.model.updateVarPseudocost(branch_cands[i], -self.model.frac(lpsol), downgain, 1)\n",
    "            if not upinf and upvalid:\n",
    "                self.model.updateVarPseudocost(branch_cands[i], 1 - self.model.frac(lpsol), upgain, 1)\n",
    "\n",
    "            scores[i] = self.compute_score(branch_cand_fracs[i], branch_cands[i], downgain, upgain)\n",
    "\n",
    "            if scores[i] > scores[best_cand_idx]:\n",
    "                best_cand_idx = i\n",
    "                if not downinf and downvalid:\n",
    "                    best_cand_gain = downgain\n",
    "                if not upinf and upvalid:\n",
    "                    best_cand_gain = upgain\n",
    "\n",
    "        # End strong branching\n",
    "        self.model.endStrongbranch()\n",
    "\n",
    "        # In the case of an LP error\n",
    "        if lperror:\n",
    "            return {\"result\": SCIP_RESULT.DIDNOTRUN}\n",
    "\n",
    "        var_name = branch_cands[best_cand_idx].name\n",
    "        self.obj_increases_by_var[var_name].append(best_cand_gain)\n",
    "\n",
    "        # print(\"--> Strong branching on variable:\", branch_cands[best_cand_idx].name)\n",
    "        # Branch on the variable with the largest score\n",
    "        down_child, eq_child, up_child = self.model.branchVarVal(\n",
    "            branch_cands[best_cand_idx], branch_cands[best_cand_idx].getLPSol())\n",
    "\n",
    "        # Update the bounds of the down node and up node. Some cols might not exist due to pricing\n",
    "        if self.model.allColsInLP():\n",
    "            if down_child is not None and down_bounds[best_cand_idx] is not None:\n",
    "                self.model.updateNodeLowerbound(down_child, down_bounds[best_cand_idx])\n",
    "            if up_child is not None and up_bounds[best_cand_idx] is not None:\n",
    "                self.model.updateNodeLowerbound(up_child, up_bounds[best_cand_idx])\n",
    "\n",
    "        return {\"result\": SCIP_RESULT.BRANCHED}\n",
    "\n",
    "    def extract_feats(self, frac, var, downgain, upgain):\n",
    "        self.n_branches_by_var[var.name] += 1\n",
    "        params = Params(\n",
    "            var_idx=var.getCol().getLPPos(),\n",
    "            x_i=var.getObj(),\n",
    "            node_depth=self.model.getCurrentNode().getDepth(),\n",
    "            nr_variables=self.model.getNVars(),\n",
    "            curr_obj=self.model.getLPObjVal(),\n",
    "            downgain=downgain,\n",
    "            upgain=upgain,\n",
    "            n_branches_by_var=self.n_branches_by_var[var.name],\n",
    "            n_nodes=self.model.getNNodes(),\n",
    "            upfrac=1 - frac,\n",
    "            downfrac=frac,\n",
    "            obj_increases=self.obj_increases_by_var[var.name]\n",
    "        )\n",
    "        features = compute_features(params, self.A, self.b, self.c)\n",
    "        return features\n",
    "\n",
    "    def compute_score(self, frac, var, downgain, upgain):\n",
    "        features = list(self.extract_feats(frac, var, downgain, upgain).values())\n",
    "        return self.predictor.predict(np.array(features).reshape(1, -1))\n"
   ],
   "outputs": [],
   "execution_count": 59
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-18T12:08:26.434390Z",
     "start_time": "2025-05-18T12:08:25.419920Z"
    }
   },
   "cell_type": "code",
   "source": [
    "prob = Problem.from_model(\"SC_0_sb.lp\")\n",
    "print(prob.solve_with_learned_sb(lr))"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original problem has 88 variables (88 bin, 0 int, 0 impl, 0 cont) and 88 constraints\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "X has 36 features, but LinearRegression is expecting 10 features as input.",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mValueError\u001B[0m                                Traceback (most recent call last)",
      "Cell \u001B[0;32mIn[59], line 84\u001B[0m, in \u001B[0;36mLearnedStrongBranching.branchexeclp\u001B[0;34m(self, allowaddcons)\u001B[0m\n\u001B[1;32m     81\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m upinf \u001B[38;5;129;01mand\u001B[39;00m upvalid:\n\u001B[1;32m     82\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmodel\u001B[38;5;241m.\u001B[39mupdateVarPseudocost(branch_cands[i], \u001B[38;5;241m1\u001B[39m \u001B[38;5;241m-\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmodel\u001B[38;5;241m.\u001B[39mfrac(lpsol), upgain, \u001B[38;5;241m1\u001B[39m)\n\u001B[0;32m---> 84\u001B[0m scores[i] \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcompute_score\u001B[49m\u001B[43m(\u001B[49m\u001B[43mbranch_cand_fracs\u001B[49m\u001B[43m[\u001B[49m\u001B[43mi\u001B[49m\u001B[43m]\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mbranch_cands\u001B[49m\u001B[43m[\u001B[49m\u001B[43mi\u001B[49m\u001B[43m]\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdowngain\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mupgain\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     86\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m scores[i] \u001B[38;5;241m>\u001B[39m scores[best_cand_idx]:\n\u001B[1;32m     87\u001B[0m     best_cand_idx \u001B[38;5;241m=\u001B[39m i\n",
      "Cell \u001B[0;32mIn[59], line 138\u001B[0m, in \u001B[0;36mLearnedStrongBranching.compute_score\u001B[0;34m(self, frac, var, downgain, upgain)\u001B[0m\n\u001B[1;32m    136\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m\u001B[38;5;250m \u001B[39m\u001B[38;5;21mcompute_score\u001B[39m(\u001B[38;5;28mself\u001B[39m, frac, var, downgain, upgain):\n\u001B[1;32m    137\u001B[0m     features \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mlist\u001B[39m(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mextract_feats(frac, var, downgain, upgain)\u001B[38;5;241m.\u001B[39mvalues())\n\u001B[0;32m--> 138\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mpredictor\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mpredict\u001B[49m\u001B[43m(\u001B[49m\u001B[43mnp\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43marray\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfeatures\u001B[49m\u001B[43m)\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mreshape\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m-\u001B[39;49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m)\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/linear_model/_base.py:297\u001B[0m, in \u001B[0;36mLinearModel.predict\u001B[0;34m(self, X)\u001B[0m\n\u001B[1;32m    283\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m\u001B[38;5;250m \u001B[39m\u001B[38;5;21mpredict\u001B[39m(\u001B[38;5;28mself\u001B[39m, X):\n\u001B[1;32m    284\u001B[0m \u001B[38;5;250m    \u001B[39m\u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m    285\u001B[0m \u001B[38;5;124;03m    Predict using the linear model.\u001B[39;00m\n\u001B[1;32m    286\u001B[0m \n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    295\u001B[0m \u001B[38;5;124;03m        Returns predicted values.\u001B[39;00m\n\u001B[1;32m    296\u001B[0m \u001B[38;5;124;03m    \"\"\"\u001B[39;00m\n\u001B[0;32m--> 297\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_decision_function\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/linear_model/_base.py:276\u001B[0m, in \u001B[0;36mLinearModel._decision_function\u001B[0;34m(self, X)\u001B[0m\n\u001B[1;32m    273\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m\u001B[38;5;250m \u001B[39m\u001B[38;5;21m_decision_function\u001B[39m(\u001B[38;5;28mself\u001B[39m, X):\n\u001B[1;32m    274\u001B[0m     check_is_fitted(\u001B[38;5;28mself\u001B[39m)\n\u001B[0;32m--> 276\u001B[0m     X \u001B[38;5;241m=\u001B[39m \u001B[43mvalidate_data\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43maccept_sparse\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m[\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mcsr\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mcsc\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mcoo\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m]\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mreset\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43;01mFalse\u001B[39;49;00m\u001B[43m)\u001B[49m\n\u001B[1;32m    277\u001B[0m     coef_ \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mcoef_\n\u001B[1;32m    278\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m coef_\u001B[38;5;241m.\u001B[39mndim \u001B[38;5;241m==\u001B[39m \u001B[38;5;241m1\u001B[39m:\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/utils/validation.py:2965\u001B[0m, in \u001B[0;36mvalidate_data\u001B[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001B[0m\n\u001B[1;32m   2962\u001B[0m     out \u001B[38;5;241m=\u001B[39m X, y\n\u001B[1;32m   2964\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m no_val_X \u001B[38;5;129;01mand\u001B[39;00m check_params\u001B[38;5;241m.\u001B[39mget(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mensure_2d\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mTrue\u001B[39;00m):\n\u001B[0;32m-> 2965\u001B[0m     \u001B[43m_check_n_features\u001B[49m\u001B[43m(\u001B[49m\u001B[43m_estimator\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mreset\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mreset\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   2967\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m out\n",
      "File \u001B[0;32m~/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/utils/validation.py:2829\u001B[0m, in \u001B[0;36m_check_n_features\u001B[0;34m(estimator, X, reset)\u001B[0m\n\u001B[1;32m   2826\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m\n\u001B[1;32m   2828\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m n_features \u001B[38;5;241m!=\u001B[39m estimator\u001B[38;5;241m.\u001B[39mn_features_in_:\n\u001B[0;32m-> 2829\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[1;32m   2830\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mX has \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mn_features\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m features, but \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mestimator\u001B[38;5;241m.\u001B[39m\u001B[38;5;18m__class__\u001B[39m\u001B[38;5;241m.\u001B[39m\u001B[38;5;18m__name__\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   2831\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mis expecting \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mestimator\u001B[38;5;241m.\u001B[39mn_features_in_\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m features as input.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   2832\u001B[0m     )\n",
      "\u001B[0;31mValueError\u001B[0m: X has 36 features, but LinearRegression is expecting 10 features as input."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception ignored in: 'pyscipopt.scip.PyBranchruleExeclp'\n",
      "Traceback (most recent call last):\n",
      "  File \"/tmp/ipykernel_18377/269964200.py\", line 84, in branchexeclp\n",
      "  File \"/tmp/ipykernel_18377/269964200.py\", line 138, in compute_score\n",
      "  File \"/home/elena/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/linear_model/_base.py\", line 297, in predict\n",
      "    return self._decision_function(X)\n",
      "  File \"/home/elena/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/linear_model/_base.py\", line 276, in _decision_function\n",
      "    X = validate_data(self, X, accept_sparse=[\"csr\", \"csc\", \"coo\"], reset=False)\n",
      "  File \"/home/elena/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/utils/validation.py\", line 2965, in validate_data\n",
      "    _check_n_features(_estimator, X, reset=reset)\n",
      "  File \"/home/elena/Documents/projects/bnb-branching-strategy-learning/.venv/lib64/python3.9/site-packages/sklearn/utils/validation.py\", line 2829, in _check_n_features\n",
      "    raise ValueError(\n",
      "ValueError: X has 36 features, but LinearRegression is expecting 10 features as input.\n",
      "[branch.c:1590] ERROR: Error <0> in function call\n",
      "[branch.c:2591] ERROR: Error <0> in function call\n",
      "[scip_branch.c:1241] ERROR: Error <0> in function call\n",
      "[cons_integral.c:106] ERROR: Error <0> in function call\n",
      "[cons.c:3471] ERROR: Error <0> in function call\n",
      "[solve.c:3520] ERROR: Error <0> in function call\n",
      "[solve.c:4425] ERROR: Error <0> in function call\n",
      "[solve.c:5104] ERROR: Error <0> in function call\n",
      "[scip_solve.c:2661] ERROR: Error <0> in function call\n"
     ]
    },
    {
     "ename": "Exception",
     "evalue": "SCIP: unspecified error!",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mException\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[0;32mIn[60], line 2\u001B[0m\n\u001B[1;32m      1\u001B[0m prob \u001B[38;5;241m=\u001B[39m Problem\u001B[38;5;241m.\u001B[39mfrom_model(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSC_0_sb.lp\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m----> 2\u001B[0m \u001B[38;5;28mprint\u001B[39m(\u001B[43mprob\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msolve_with_learned_sb\u001B[49m\u001B[43m(\u001B[49m\u001B[43mlr\u001B[49m\u001B[43m)\u001B[49m)\n",
      "Cell \u001B[0;32mIn[25], line 150\u001B[0m, in \u001B[0;36mProblem.solve_with_learned_sb\u001B[0;34m(self, predictor, logged, max_nodes, timelimit)\u001B[0m\n\u001B[1;32m    140\u001B[0m model\u001B[38;5;241m.\u001B[39mincludeBranchrule(\n\u001B[1;32m    141\u001B[0m     sb,\n\u001B[1;32m    142\u001B[0m     \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mlearnedstrongbranching\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    146\u001B[0m     maxbounddist\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m1.0\u001B[39m\n\u001B[1;32m    147\u001B[0m )\n\u001B[1;32m    149\u001B[0m start \u001B[38;5;241m=\u001B[39m datetime\u001B[38;5;241m.\u001B[39mnow()\n\u001B[0;32m--> 150\u001B[0m \u001B[43mmodel\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptimize\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    151\u001B[0m end \u001B[38;5;241m=\u001B[39m datetime\u001B[38;5;241m.\u001B[39mnow()\n\u001B[1;32m    153\u001B[0m \u001B[38;5;28;01massert\u001B[39;00m model\u001B[38;5;241m.\u001B[39mgetStatus() \u001B[38;5;241m==\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124moptimal\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mModel \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mmodel\u001B[38;5;241m.\u001B[39mgetProbName()\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m did not solve to optimality. Status: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mmodel\u001B[38;5;241m.\u001B[39mgetStatus()\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m\n",
      "File \u001B[0;32msrc/pyscipopt/scip.pxi:7209\u001B[0m, in \u001B[0;36mpyscipopt.scip.Model.optimize\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32msrc/pyscipopt/scip.pxi:301\u001B[0m, in \u001B[0;36mpyscipopt.scip.PY_SCIP_CALL\u001B[0;34m()\u001B[0m\n",
      "\u001B[0;31mException\u001B[0m: SCIP: unspecified error!"
     ]
    }
   ],
   "execution_count": 60
  }
 ]
}
